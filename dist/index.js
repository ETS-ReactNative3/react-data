module.exports=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=102)}([function(t,e,r){var n=r(34),o=r(76),i=r(78);t.exports=function(t,e){return i(o(t,e,n),t+"")}},function(t,e,r){var n=r(163),o=r(193),i=r(34),u=r(7),a=r(202);t.exports=function(t){return"function"==typeof t?t:null==t?i:"object"==typeof t?u(t)?o(t[0],t[1]):n(t):a(t)}},function(t,e,r){var n=r(128);t.exports=function(t){var e=n(t),r=e%1;return e==e?r?e-r:e:0}},function(t,e,r){"use strict";var n=r(61),o=Object.prototype.toString;function i(t){return"[object Array]"===o.call(t)}function u(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function s(t){return"[object Function]"===o.call(t)}function c(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var r=0,n=t.length;r<n;r++)e.call(null,t[r],r,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!u(t)&&null!==t.constructor&&!u(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isUndefined:u,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:s,isStream:function(t){return a(t)&&s(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function t(){var e={};function r(r,n){"object"==typeof e[n]&&"object"==typeof r?e[n]=t(e[n],r):e[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return e},deepMerge:function t(){var e={};function r(r,n){"object"==typeof e[n]&&"object"==typeof r?e[n]=t(e[n],r):e[n]="object"==typeof r?t({},r):r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return e},extend:function(t,e,r){return c(e,(function(e,o){t[o]=r&&"function"==typeof e?n(e,r):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,r){var n=r(41),o=r(17);t.exports=function(t){return o(t)&&n(t)}},function(t,e,r){var n=r(43),o=r(132);t.exports=function t(e,r,i,u,a){var s=-1,c=e.length;for(i||(i=o),a||(a=[]);++s<c;){var f=e[s];r>0&&i(f)?r>1?t(f,r-1,i,u,a):n(a,f):u||(a[a.length]=f)}return a}},function(t,e){t.exports=function(t,e,r){var n=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(r=r>o?o:r)<0&&(r+=o),o=e>r?0:r-e>>>0,e>>>=0;for(var i=Array(o);++n<o;)i[n]=t[n+e];return i}},function(t,e){var r=Array.isArray;t.exports=r},function(t,e){t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}},function(t,e){t.exports=function(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}},function(t,e,r){var n=r(72),o="object"==typeof self&&self&&self.Object===Object&&self,i=n||o||Function("return this")();t.exports=i},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e){var r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&r.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,r){var n=r(20),o=r(17);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==n(t)}},function(t,e,r){var n=r(138),o=r(141);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},function(t,e,r){var n=r(26),o=r(47),i=r(49),u=r(33),a=r(256),s=r(50);t.exports=function(t,e,r){var c=-1,f=o,l=t.length,p=!0,h=[],d=h;if(r)p=!1,f=i;else if(l>=200){var v=e?null:a(t);if(v)return s(v);p=!1,f=u,d=new n}else d=e?[]:h;t:for(;++c<l;){var y=t[c],m=e?e(y):y;if(y=r||0!==y?y:0,p&&m==m){for(var g=d.length;g--;)if(d[g]===m)continue t;e&&d.push(m),h.push(y)}else f(d,m,r)||(d!==h&&d.push(m),h.push(y))}return h}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,r){var n=r(13);t.exports=function(t){if("string"==typeof t||n(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.camelToUnderscore=function(t){return t.replace(/([A-Z])/g,"_$1").toLowerCase()},e.camelToDash=function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()},e.dashToCamel=function(t){return t.replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))},e.dashToCapital=function(t){return t.split("-").map((function(t){return t.replace(t.charAt(0),t.charAt(0).toUpperCase())})).join("")},e.phoneToString=function(t){return t.replace(/\D+/g,"")}},function(t,e,r){var n=r(21),o=r(126),i=r(127),u=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":u&&u in Object(t)?o(t):i(t)}},function(t,e,r){var n=r(10).Symbol;t.exports=n},function(t,e,r){var n=r(26),o=r(47),i=r(49),u=r(8),a=r(32),s=r(33);t.exports=function(t,e,r,c){var f=-1,l=o,p=!0,h=t.length,d=[],v=e.length;if(!h)return d;r&&(e=u(e,a(r))),c?(l=i,p=!1):e.length>=200&&(l=s,p=!1,e=new n(e));t:for(;++f<h;){var y=t[f],m=null==r?y:r(y);if(y=c||0!==y?y:0,p&&m==m){for(var g=v;g--;)if(e[g]===m)continue t;d.push(y)}else l(e,m,c)||d.push(y)}return d}},function(t,e){t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var u=t[r];e(u,r,t)&&(i[o++]=u)}return i}},function(t,e){t.exports=require("react")},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isEmpty=e.timeElapsed=e.removeObject=e.addObject=e.timeout=void 0;var n,o=r(123),i=(n=o)&&n.__esModule?n:{default:n};e.timeout=function(t){return new Promise((function(e){return setTimeout(e,t)}))},e.addObject=function(t,e){t.includes(e)||t.push(e);return t},e.removeObject=function(t,e){return i.default.pull(t,e)},e.timeElapsed=function(t){return Date.now()-t},e.isEmpty=function(t){return null==t||null==t||"undefined"==t||(Array.isArray(t)?0==t.length:t.constructor==Object?0==Object.keys(t):0==t.length)}},function(t,e,r){var n=r(45),o=r(156),i=r(157);function u(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new n;++e<r;)this.add(t[e])}u.prototype.add=u.prototype.push=o,u.prototype.has=i,t.exports=u},function(t,e,r){var n=r(14)(Object,"create");t.exports=n},function(t,e,r){var n=r(146),o=r(147),i=r(148),u=r(149),a=r(150);function s(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}s.prototype.clear=n,s.prototype.delete=o,s.prototype.get=i,s.prototype.has=u,s.prototype.set=a,t.exports=s},function(t,e,r){var n=r(11);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},function(t,e,r){var n=r(152);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},function(t,e){t.exports=function(t,e,r,n){for(var o=t.length,i=r+(n?1:-1);n?i--:++i<o;)if(e(t[i],i,t))return i;return-1}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e){t.exports=function(t,e){return t.has(e)}},function(t,e){t.exports=function(t){return t}},function(t,e,r){var n=r(7),o=r(52),i=r(194),u=r(197);t.exports=function(t,e){return n(t)?t:o(t,e)?[t]:i(u(t))}},function(t,e,r){var n=r(6);t.exports=function(t,e,r,o){for(var i=t.length,u=o?i:-1;(o?u--:++u<i)&&e(t[u],u,t););return r?n(t,o?0:u,o?u+1:i):n(t,o?u+1:0,o?i:u)}},function(t,e,r){var n=r(56),o=r(34),i=r(13);t.exports=function(t,e,r){var u=0,a=null==t?u:t.length;if("number"==typeof e&&e==e&&a<=2147483647){for(;u<a;){var s=u+a>>>1,c=t[s];null!==c&&!i(c)&&(r?c<=e:c<e)?u=s+1:a=s}return a}return n(t,e,o,r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),o=(u(r(24)),u(r(39))),i=u(r(60));function u(t){return t&&t.__esModule?t:{default:t}}function a(t){return function(){var e=t.apply(this,arguments);return new Promise((function(t,r){return function n(o,i){try{var u=e[o](i),a=u.value}catch(t){return void r(t)}if(!u.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));t(a)}("next")}))}}var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,u,s;return n(t,null,[{key:"get",value:function(t,e){return this[t]}},{key:"set",value:function(t,e){if(t.includes(".")){var r=t.split(".");this[r[0]][r[1]]=e}else this[t]=e;return this}},{key:"baseURL",value:function(){return"undefined"==typeof window?"":this.apiDomain}},{key:"buildURL",value:function(t,e){return e?this.baseURL()+"/"+(0,o.default)(t)+"/"+String(e):this.baseURL()+"/"+(0,o.default)(t)}},{key:"urlForFindAll",value:function(t){return this.buildURL(t)}},{key:"urlForFindRecord",value:function(t,e){return this.buildURL(t,e)}},{key:"urlForQuery",value:function(t){return this.buildURL(t)}},{key:"urlForQueryRecord",value:function(t,e){return this.buildURL(t,e)}},{key:"urlForCreateRecord",value:function(t){return this.buildURL(t)}},{key:"urlForUpdateRecord",value:function(t,e){return this.buildURL(t,e)}},{key:"urlForDestroyRecord",value:function(t,e){return this.buildURL(t,e)}},{key:"findAll",value:(s=a(regeneratorRuntime.mark((function t(e,r){var n,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,n=this.urlForFindAll(e),t.next=4,i.default.get(n,{params:r});case 4:return o=t.sent,t.abrupt("return",o.data);case 8:throw t.prev=8,t.t0=t.catch(0),t.t0;case 11:case"end":return t.stop()}}),t,this,[[0,8]])}))),function(t,e){return s.apply(this,arguments)})},{key:"findRecord",value:(u=a(regeneratorRuntime.mark((function t(e,r){var n,o,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,n=this.urlForFindRecord(e,r),t.next=4,i.default.get(n,{params:u});case 4:return o=t.sent,t.abrupt("return",o.data);case 8:throw t.prev=8,t.t0=t.catch(0),t.t0;case 11:case"end":return t.stop()}}),t,this,[[0,8]])}))),function(t,e){return u.apply(this,arguments)})},{key:"query",value:(r=a(regeneratorRuntime.mark((function t(e,r){var n,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,n=this.urlForQuery(e),t.next=4,i.default.get(n,{params:r});case 4:return o=t.sent,t.abrupt("return",o.data);case 8:throw t.prev=8,t.t0=t.catch(0),t.t0;case 11:case"end":return t.stop()}}),t,this,[[0,8]])}))),function(t,e){return r.apply(this,arguments)})},{key:"queryRecord",value:(e=a(regeneratorRuntime.mark((function t(e){var r,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,r=this.urlForQueryRecord(e,o),t.next=4,i.default.get(r,{params:u});case 4:return n=t.sent,t.abrupt("return",n.data);case 8:throw t.prev=8,t.t0=t.catch(0),t.t0;case 11:case"end":return t.stop()}}),t,this,[[0,8]])}))),function(t){return e.apply(this,arguments)})}]),t}();s.apiDomain="",e.default=s},function(t,e,r){t.exports=function(){var t=[],e=[],r={},n={},o={};function i(t){return"string"==typeof t?new RegExp("^"+t+"$","i"):t}function u(t,e){return t===e?e:t===t.toLowerCase()?e.toLowerCase():t===t.toUpperCase()?e.toUpperCase():t[0]===t[0].toUpperCase()?e.charAt(0).toUpperCase()+e.substr(1).toLowerCase():e.toLowerCase()}function a(t,e){return t.replace(/\$(\d{1,2})/g,(function(t,r){return e[r]||""}))}function s(t,e){return t.replace(e[0],(function(r,n){var o=a(e[1],arguments);return u(""===r?t[n-1]:r,o)}))}function c(t,e,n){if(!t.length||r.hasOwnProperty(t))return e;for(var o=n.length;o--;){var i=n[o];if(i[0].test(e))return s(e,i)}return e}function f(t,e,r){return function(n){var o=n.toLowerCase();return e.hasOwnProperty(o)?u(n,o):t.hasOwnProperty(o)?u(n,t[o]):c(o,n,r)}}function l(t,e,r,n){return function(n){var o=n.toLowerCase();return!!e.hasOwnProperty(o)||!t.hasOwnProperty(o)&&c(o,o,r)===o}}function p(t,e,r){return(r?e+" ":"")+(1===e?p.singular(t):p.plural(t))}return p.plural=f(o,n,t),p.isPlural=l(o,n,t),p.singular=f(n,o,e),p.isSingular=l(n,o,e),p.addPluralRule=function(e,r){t.push([i(e),r])},p.addSingularRule=function(t,r){e.push([i(t),r])},p.addUncountableRule=function(t){"string"!=typeof t?(p.addPluralRule(t,"$0"),p.addSingularRule(t,"$0")):r[t.toLowerCase()]=!0},p.addIrregularRule=function(t,e){e=e.toLowerCase(),t=t.toLowerCase(),o[t]=e,n[e]=t},[["I","we"],["me","us"],["he","they"],["she","they"],["them","them"],["myself","ourselves"],["yourself","yourselves"],["itself","themselves"],["herself","themselves"],["himself","themselves"],["themself","themselves"],["is","are"],["was","were"],["has","have"],["this","these"],["that","those"],["echo","echoes"],["dingo","dingoes"],["volcano","volcanoes"],["tornado","tornadoes"],["torpedo","torpedoes"],["genus","genera"],["viscus","viscera"],["stigma","stigmata"],["stoma","stomata"],["dogma","dogmata"],["lemma","lemmata"],["schema","schemata"],["anathema","anathemata"],["ox","oxen"],["axe","axes"],["die","dice"],["yes","yeses"],["foot","feet"],["eave","eaves"],["goose","geese"],["tooth","teeth"],["quiz","quizzes"],["human","humans"],["proof","proofs"],["carve","carves"],["valve","valves"],["looey","looies"],["thief","thieves"],["groove","grooves"],["pickaxe","pickaxes"],["passerby","passersby"]].forEach((function(t){return p.addIrregularRule(t[0],t[1])})),[[/s?$/i,"s"],[/[^\u0000-\u007F]$/i,"$0"],[/([^aeiou]ese)$/i,"$1"],[/(ax|test)is$/i,"$1es"],[/(alias|[^aou]us|t[lm]as|gas|ris)$/i,"$1es"],[/(e[mn]u)s?$/i,"$1s"],[/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i,"$1"],[/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,"$1i"],[/(alumn|alg|vertebr)(?:a|ae)$/i,"$1ae"],[/(seraph|cherub)(?:im)?$/i,"$1im"],[/(her|at|gr)o$/i,"$1oes"],[/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i,"$1a"],[/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i,"$1a"],[/sis$/i,"ses"],[/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i,"$1$2ves"],[/([^aeiouy]|qu)y$/i,"$1ies"],[/([^ch][ieo][ln])ey$/i,"$1ies"],[/(x|ch|ss|sh|zz)$/i,"$1es"],[/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i,"$1ices"],[/\b((?:tit)?m|l)(?:ice|ouse)$/i,"$1ice"],[/(pe)(?:rson|ople)$/i,"$1ople"],[/(child)(?:ren)?$/i,"$1ren"],[/eaux$/i,"$0"],[/m[ae]n$/i,"men"],["thou","you"]].forEach((function(t){return p.addPluralRule(t[0],t[1])})),[[/s$/i,""],[/(ss)$/i,"$1"],[/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i,"$1fe"],[/(ar|(?:wo|[ae])l|[eo][ao])ves$/i,"$1f"],[/ies$/i,"y"],[/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i,"$1ie"],[/\b(mon|smil)ies$/i,"$1ey"],[/\b((?:tit)?m|l)ice$/i,"$1ouse"],[/(seraph|cherub)im$/i,"$1"],[/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i,"$1"],[/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i,"$1sis"],[/(movie|twelve|abuse|e[mn]u)s$/i,"$1"],[/(test)(?:is|es)$/i,"$1is"],[/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,"$1us"],[/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i,"$1um"],[/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i,"$1on"],[/(alumn|alg|vertebr)ae$/i,"$1a"],[/(cod|mur|sil|vert|ind)ices$/i,"$1ex"],[/(matr|append)ices$/i,"$1ix"],[/(pe)(rson|ople)$/i,"$1rson"],[/(child)ren$/i,"$1"],[/(eau)x?$/i,"$1"],[/men$/i,"man"]].forEach((function(t){return p.addSingularRule(t[0],t[1])})),["adulthood","advice","agenda","aid","aircraft","alcohol","ammo","analytics","anime","athletics","audio","bison","blood","bream","buffalo","butter","carp","cash","chassis","chess","clothing","cod","commerce","cooperation","corps","debris","diabetes","digestion","elk","energy","equipment","excretion","expertise","firmware","flounder","fun","gallows","garbage","graffiti","hardware","headquarters","health","herpes","highjinks","homework","housework","information","jeans","justice","kudos","labour","literature","machinery","mackerel","mail","media","mews","moose","music","mud","manga","news","only","personnel","pike","plankton","pliers","police","pollution","premises","rain","research","rice","salmon","scissors","series","sewage","shambles","shrimp","software","species","staff","swine","tennis","traffic","transportation","trout","tuna","wealth","welfare","whiting","wildebeest","wildlife","you",/pok[eé]mon$/i,/[^aeiou]ese$/i,/deer$/i,/fish$/i,/measles$/i,/o[iu]s$/i,/pox$/i,/sheep$/i].forEach(p.addUncountableRule),p}()},function(t,e,r){var n=r(11),o=r(41),i=r(12),u=r(16);t.exports=function(t,e,r){if(!u(r))return!1;var a=typeof e;return!!("number"==a?o(r)&&i(e,r.length):"string"==a&&e in r)&&n(r[e],t)}},function(t,e,r){var n=r(71),o=r(42);t.exports=function(t){return null!=t&&o(t.length)&&!n(t)}},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e){t.exports=function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}},function(t,e,r){var n=r(133),o=r(17),i=Object.prototype,u=i.hasOwnProperty,a=i.propertyIsEnumerable,s=n(function(){return arguments}())?n:function(t){return o(t)&&u.call(t,"callee")&&!a.call(t,"callee")};t.exports=s},function(t,e,r){var n=r(135),o=r(151),i=r(153),u=r(154),a=r(155);function s(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}s.prototype.clear=n,s.prototype.delete=o,s.prototype.get=i,s.prototype.has=u,s.prototype.set=a,t.exports=s},function(t,e,r){var n=r(14)(r(10),"Map");t.exports=n},function(t,e,r){var n=r(48);t.exports=function(t,e){return!!(null==t?0:t.length)&&n(t,e,0)>-1}},function(t,e,r){var n=r(31),o=r(75),i=r(158);t.exports=function(t,e,r){return e==e?i(t,e,r):n(t,o,r)}},function(t,e){t.exports=function(t,e,r){for(var n=-1,o=null==t?0:t.length;++n<o;)if(r(e,t[n]))return!0;return!1}},function(t,e){t.exports=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}},function(t,e,r){var n=r(35),o=r(18);t.exports=function(t,e){for(var r=0,i=(e=n(e,t)).length;null!=t&&r<i;)t=t[o(e[r++])];return r&&r==i?t:void 0}},function(t,e,r){var n=r(7),o=r(13),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,u=/^\w*$/;t.exports=function(t,e){if(n(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!o(t))||(u.test(t)||!i.test(t)||null!=e&&t in Object(e))}},function(t,e,r){var n=r(26),o=r(47),i=r(49),u=r(8),a=r(32),s=r(33),c=Math.min;t.exports=function(t,e,r){for(var f=r?i:o,l=t[0].length,p=t.length,h=p,d=Array(p),v=1/0,y=[];h--;){var m=t[h];h&&e&&(m=u(m,a(e))),v=c(m.length,v),d[h]=!r&&(e||l>=120&&m.length>=120)?new n(h&&m):void 0}m=t[0];var g=-1,b=d[0];t:for(;++g<l&&y.length<v;){var x=m[g],w=e?e(x):x;if(x=r||0!==x?x:0,!(b?s(b,w):f(y,w,r))){for(h=p;--h;){var j=d[h];if(!(j?s(j,w):f(t[h],w,r)))continue t}b&&b.push(w),y.push(x)}}return y}},function(t,e,r){var n=r(4);t.exports=function(t){return n(t)?t:[]}},function(t,e,r){var n=r(8),o=r(48),i=r(230),u=r(32),a=r(73),s=Array.prototype.splice;t.exports=function(t,e,r,c){var f=c?i:o,l=-1,p=e.length,h=t;for(t===e&&(e=a(e)),r&&(h=n(t,u(r)));++l<p;)for(var d=0,v=e[l],y=r?r(v):v;(d=f(h,y,d,c))>-1;)h!==t&&s.call(h,d,1),s.call(t,d,1);return t}},function(t,e,r){var n=r(13),o=Math.floor,i=Math.min;t.exports=function(t,e,r,u){e=r(e);for(var a=0,s=null==t?0:t.length,c=e!=e,f=null===e,l=n(e),p=void 0===e;a<s;){var h=o((a+s)/2),d=r(t[h]),v=void 0!==d,y=null===d,m=d==d,g=n(d);if(c)var b=u||m;else b=p?m&&(u||v):f?m&&v&&(u||!y):l?m&&v&&!y&&(u||!g):!y&&!g&&(u?d<=e:d<e);b?a=h+1:s=h}return i(s,4294967294)}},function(t,e,r){var n=r(23),o=r(8),i=r(92),u=r(84),a=r(4),s=Math.max;t.exports=function(t){if(!t||!t.length)return[];var e=0;return t=n(t,(function(t){if(a(t))return e=s(t.length,e),!0})),u(e,(function(e){return o(t,i(e))}))}},function(t,e,r){var n=r(22),o=r(5),i=r(15);t.exports=function(t,e,r){var u=t.length;if(u<2)return u?i(t[0]):[];for(var a=-1,s=Array(u);++a<u;)for(var c=t[a],f=-1;++f<u;)f!=a&&(s[a]=n(s[a]||c,t[f],e,r));return i(o(s,1),e,r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){var t;return(t=console).log.apply(t,arguments)}},function(t,e,r){t.exports=r(104)},function(t,e,r){"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return t.apply(e,r)}}},function(t,e,r){"use strict";var n=r(3);function o(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var i;if(r)i=r(e);else if(n.isURLSearchParams(e))i=e.toString();else{var u=[];n.forEach(e,(function(t,e){null!=t&&(n.isArray(t)?e+="[]":t=[t],n.forEach(t,(function(t){n.isDate(t)?t=t.toISOString():n.isObject(t)&&(t=JSON.stringify(t)),u.push(o(e)+"="+o(t))})))})),i=u.join("&")}if(i){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},function(t,e,r){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,r){"use strict";(function(e){var n=r(3),o=r(109),i={"Content-Type":"application/x-www-form-urlencoded"};function u(t,e){!n.isUndefined(t)&&n.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,s={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==e&&"[object process]"===Object.prototype.toString.call(e))&&(a=r(66)),a),transformRequest:[function(t,e){return o(e,"Accept"),o(e,"Content-Type"),n.isFormData(t)||n.isArrayBuffer(t)||n.isBuffer(t)||n.isStream(t)||n.isFile(t)||n.isBlob(t)?t:n.isArrayBufferView(t)?t.buffer:n.isURLSearchParams(t)?(u(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):n.isObject(t)?(u(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(t){s.headers[t]={}})),n.forEach(["post","put","patch"],(function(t){s.headers[t]=n.merge(i)})),t.exports=s}).call(this,r(65))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:u}catch(t){n=u}}();var s,c=[],f=!1,l=-1;function p(){f&&s&&(f=!1,s.length?c=s.concat(c):l=-1,c.length&&h())}function h(){if(!f){var t=a(p);f=!0;for(var e=c.length;e;){for(s=c,c=[];++l<e;)s&&s[l].run();l=-1,e=c.length}s=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===u||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||f||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,r){"use strict";var n=r(3),o=r(110),i=r(62),u=r(112),a=r(115),s=r(116),c=r(67);t.exports=function(t){return new Promise((function(e,f){var l=t.data,p=t.headers;n.isFormData(l)&&delete p["Content-Type"];var h=new XMLHttpRequest;if(t.auth){var d=t.auth.username||"",v=t.auth.password||"";p.Authorization="Basic "+btoa(d+":"+v)}var y=u(t.baseURL,t.url);if(h.open(t.method.toUpperCase(),i(y,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,n={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:t,request:h};o(e,f,n),h=null}},h.onabort=function(){h&&(f(c("Request aborted",t,"ECONNABORTED",h)),h=null)},h.onerror=function(){f(c("Network Error",t,null,h)),h=null},h.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),f(c(e,t,"ECONNABORTED",h)),h=null},n.isStandardBrowserEnv()){var m=r(117),g=(t.withCredentials||s(y))&&t.xsrfCookieName?m.read(t.xsrfCookieName):void 0;g&&(p[t.xsrfHeaderName]=g)}if("setRequestHeader"in h&&n.forEach(p,(function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete p[e]:h.setRequestHeader(e,t)})),n.isUndefined(t.withCredentials)||(h.withCredentials=!!t.withCredentials),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){h&&(h.abort(),f(t),h=null)})),void 0===l&&(l=null),h.send(l)}))}},function(t,e,r){"use strict";var n=r(111);t.exports=function(t,e,r,o,i){var u=new Error(t);return n(u,e,r,o,i)}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){e=e||{};var r={},o=["url","method","params","data"],i=["headers","auth","proxy"],u=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];n.forEach(o,(function(t){void 0!==e[t]&&(r[t]=e[t])})),n.forEach(i,(function(o){n.isObject(e[o])?r[o]=n.deepMerge(t[o],e[o]):void 0!==e[o]?r[o]=e[o]:n.isObject(t[o])?r[o]=n.deepMerge(t[o]):void 0!==t[o]&&(r[o]=t[o])})),n.forEach(u,(function(n){void 0!==e[n]?r[n]=e[n]:void 0!==t[n]&&(r[n]=t[n])}));var a=o.concat(i).concat(u),s=Object.keys(e).filter((function(t){return-1===a.indexOf(t)}));return n.forEach(s,(function(n){void 0!==e[n]?r[n]=e[n]:void 0!==t[n]&&(r[n]=t[n])})),r}},function(t,e,r){"use strict";function n(t){this.message=t}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,t.exports=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),u=(s(r(24)),s(r(39)),r(19)),a=r(25);function s(t){return t&&t.__esModule?t:{default:t}}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var f=function(){function t(e){c(this,t),this.store=e||{}}return i(t,[{key:"checkAttrs",value:function(t){var e=o({},this.attrs,this.globalAttrs);return!Object.keys(e).includes(t)||e[t]}},{key:"checkRelationships",value:function(t){var e=o({},this.relationships,this.globalRelationships);return!Object.keys(e).includes(t)||e[t]}},{key:"serialize",value:function(t){return{data:{attributes:this.serializeAttrs(t)}}}},{key:"serializeAttrs",value:function(t){var e=this,r={};return Object.keys(t).forEach((function(o){if(!(0,a.isEmpty)(t[o])&&0!=e.checkAttrs(o))return Array.isArray(t[o])&&!(0,a.isEmpty)(t[o])?"object"==n(t[o][0])?void(r[o]=e.serializeRelationships(t,o)):void(r[(0,u.camelToDash)(o)]=JSON.stringify(t[o])):void("object"!=n(t[o])||(0,a.isEmpty)(t[o])?r[(0,u.camelToDash)(o)]=t[o]:Object.assign(r,e.serializeRelationship(t,o)))})),r}},{key:"serializeRelationships",value:function(t,e){var r=this,n=[];return t[e].forEach((function(t){1==r.checkRelationships(e).serialize&&n.push(r.serializeAttrs(t)),"id"==r.checkRelationships(e).serialize&&n.push({id:parseInt(t.id)}),t.type||n.push(r.serializeAttrs(t))})),n}},{key:"serializeRelationship",value:function(t,e){var r={};return 1==this.checkRelationships(e).serialize&&(r[(0,u.camelToDash)(e)]=this.serializeAttrs(t[e])),"id"==this.checkRelationships(e).serialize&&(r[(0,u.camelToDash)(e)]={id:parseInt(t[e].id)}),t[e].type||(r[(0,u.camelToDash)(e)]=this.serializeAttrs(t[e])),r}},{key:"normalizeArray",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=[];return(0,a.isEmpty)(t)||t.map((function(t){var n={},i=e.normalizeAttributes(t,r);return Object.keys(i).forEach((function(t){n[(0,u.dashToCamel)(t)]=i[t]})),o.push(n)})),{records:o,meta:this.normalizeAttributes(n)}}},{key:"normalize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r={};if((0,a.isEmpty)(t))return r;var n=this.normalizeAttributes(t,e);return Object.keys(n).forEach((function(t){r[(0,u.dashToCamel)(t)]=n[t]})),r}},{key:"normalizeAttributes",value:function(t,e){var r=this,o={};return Object.keys(t).forEach((function(i){if(!(0,a.isEmpty)(t[i]))if("id"!=i)if("type"!=i){if(!Array.isArray(t[i]))return"object"==n(t[i])?"attributes"==i?void Object.assign(o,r.normalizeAttributes(t[i])):"relationships"==i?void Object.assign(o,r.normalizeRelationships(t[i],e)):void(o[(0,u.dashToCamel)(i)]=r.normalizeAttributes(t[i])):void(o[(0,u.dashToCamel)(i)]=t[i]);o[(0,u.dashToCamel)(i)]=t[i]}else o[i]=t[i];else o[i]=t[i]})),o}},{key:"normalizeRelationships",value:function(t,e){var r=this,o={};return Object.keys(t).forEach((function(i){var s={};if(!(0,a.isEmpty)(t[i].data))if(Array.isArray(t[i].data))o[(0,u.dashToCamel)(i)]=r.normalizeRelationshipArray(t[i].data,e);else if("object"==n(t[i].data)){s.id=t[i].data.id,s.type=t[i].data.type;var c=e.find((function(t){return t.type===s.type&&t.id===s.id}));return(0,a.isEmpty)(c)?void(o[(0,u.dashToCamel)(i)]=s):void(o[(0,u.dashToCamel)(i)]=r.normalizeAttributes(c))}})),o}},{key:"normalizeRelationshipArray",value:function(t,e){var r=this,n=[];return t.forEach((function(t){var o={};o.id=t.id,o.type=t.type;var i=e.find((function(t){return t.type===o.type&&t.id===o.id}));(0,a.isEmpty)(i)?n.push(o):n.push(r.normalizeAttributes(i))})),n}},{key:"attrs",get:function(){return{}}},{key:"globalAttrs",get:function(){return{className:!1,type:!1,parent:!1,store:!1,log:!1,updatedAt:!1,createdAt:!1}}},{key:"relationships",get:function(){return{}}},{key:"globalRelationships",get:function(){return{}}}]),t}();e.default=f},function(t,e,r){var n=r(20),o=r(16);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,r){(function(e){var r="object"==typeof e&&e&&e.Object===Object&&e;t.exports=r}).call(this,r(125))},function(t,e){t.exports=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}},function(t,e){var r=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return r.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e){t.exports=function(t){return t!=t}},function(t,e,r){var n=r(77),o=Math.max;t.exports=function(t,e,r){return e=o(void 0===e?t.length-1:e,0),function(){for(var i=arguments,u=-1,a=o(i.length-e,0),s=Array(a);++u<a;)s[u]=i[e+u];u=-1;for(var c=Array(e+1);++u<e;)c[u]=i[u];return c[e]=r(s),n(t,this,c)}}},function(t,e){t.exports=function(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}},function(t,e,r){var n=r(159),o=r(161)(n);t.exports=o},function(t,e,r){var n=r(14),o=function(){try{var t=n(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},function(t,e,r){var n=r(28),o=r(165),i=r(166),u=r(167),a=r(168),s=r(169);function c(t){var e=this.__data__=new n(t);this.size=e.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=u,c.prototype.has=a,c.prototype.set=s,t.exports=c},function(t,e,r){var n=r(170),o=r(17);t.exports=function t(e,r,i,u,a){return e===r||(null==e||null==r||!o(e)&&!o(r)?e!=e&&r!=r:n(e,r,i,u,t,a))}},function(t,e,r){var n=r(26),o=r(171),i=r(33);t.exports=function(t,e,r,u,a,s){var c=1&r,f=t.length,l=e.length;if(f!=l&&!(c&&l>f))return!1;var p=s.get(t);if(p&&s.get(e))return p==e;var h=-1,d=!0,v=2&r?new n:void 0;for(s.set(t,e),s.set(e,t);++h<f;){var y=t[h],m=e[h];if(u)var g=c?u(m,y,h,e,t,s):u(y,m,h,t,e,s);if(void 0!==g){if(g)continue;d=!1;break}if(v){if(!o(e,(function(t,e){if(!i(v,e)&&(y===t||a(y,t,r,u,s)))return v.push(e)}))){d=!1;break}}else if(y!==m&&!a(y,m,r,u,s)){d=!1;break}}return s.delete(t),s.delete(e),d}},function(t,e,r){var n=r(180),o=r(184),i=r(41);t.exports=function(t){return i(t)?n(t):o(t)}},function(t,e){t.exports=function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}},function(t,e,r){(function(t){var n=r(10),o=r(181),i=e&&!e.nodeType&&e,u=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=u&&u.exports===i?n.Buffer:void 0,s=(a?a.isBuffer:void 0)||o;t.exports=s}).call(this,r(86)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){var n=r(182),o=r(32),i=r(183),u=i&&i.isTypedArray,a=u?o(u):n;t.exports=a},function(t,e,r){var n=r(14)(r(10),"Set");t.exports=n},function(t,e,r){var n=r(16);t.exports=function(t){return t==t&&!n(t)}},function(t,e){t.exports=function(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}},function(t,e,r){var n=r(51);t.exports=function(t,e,r){var o=null==t?void 0:n(t,e);return void 0===o?r:o}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e){t.exports=function(t){return t&&t.length?t[0]:void 0}},function(t,e,r){var n=r(5);t.exports=function(t){return(null==t?0:t.length)?n(t,1):[]}},function(t,e,r){var n=r(55);t.exports=function(t,e){return t&&t.length&&e&&e.length?n(t,e):t}},function(t,e,r){var n=r(235),o=r(12),i=Array.prototype.splice;t.exports=function(t,e){for(var r=t?e.length:0,u=r-1;r--;){var a=e[r];if(r==u||a!==s){var s=a;o(a)?i.call(t,a,1):n(t,a)}}return t}},function(t,e,r){var n=r(11);t.exports=function(t,e){for(var r=-1,o=t.length,i=0,u=[];++r<o;){var a=t[r],s=e?e(a):a;if(!r||!n(s,c)){var c=s;u[i++]=0===a?0:a}}return u}},function(t,e,r){var n=r(77),o=r(8),i=r(57);t.exports=function(t,e){if(!t||!t.length)return[];var r=i(t);return null==e?r:o(r,(function(t){return n(e,void 0,t)}))}},function(t,e,r){var n=r(269),o=r(11),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){var u=t[e];i.call(t,e)&&o(u,r)&&(void 0!==r||e in t)||n(t,e,r)}},function(t,e){t.exports=function(t,e,r){for(var n=-1,o=t.length,i=e.length,u={};++n<o;){var a=n<i?e[n]:void 0;r(u,t[n],a)}return u}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=(f(r(24)),f(r(39))),u=f(r(60)),a=r(19),s=r(25),c=f(r(59));function f(t){return t&&t.__esModule?t:{default:t}}function l(t){return function(){var e=t.apply(this,arguments);return new Promise((function(t,r){return function n(o,i){try{var u=e[o](i),a=u.value}catch(t){return void r(t)}if(!u.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));t(a)}("next")}))}}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var h=function(){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(this,t),this.id=n.id||"",this.type=(0,a.camelToDash)(e).toLowerCase(),this.updatedAt=n.updatedAt||"",this.createdAt=n.createdAt||"",this.store=r||{},this.log=[]}var e,r,f,h;return o(t,[{key:"get",value:function(t,e){return this[t]}},{key:"set",value:function(t,e){if(t.includes(".")){var r=t.split("."),n=this;r.forEach((function(t,e){r.length-2==e&&(n=n[t])})),n[r[r.length-1]]=e}else this[t]=e;return this.store.updateStore(this.type),this}},{key:"setRelation",value:function(t,e){return(0,s.isEmpty)(this[t])?this.set([t],this.store.createRecord(t,e)):this.set([t],e)}},{key:"updateProps",value:function(t){var e=this;Object.keys(t).forEach((function(r){"type"!=r&&(Array.isArray(e[r])&&!(0,s.isEmpty)(e[r][0])&&e[r][0].id||"object"==n(e[r])&&e[r].id||(e[r]=t[r]))}))}},{key:"attr",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";switch(t){case"decimal":return parseFloat(e)||0;case"integer":return parseInt(e)||0;case"string":return String(e)||"";default:return e}}},{key:"belongsTo",value:function(t,e){return(0,s.isEmpty)(e)?{}:this.store.peekOrCreateRecord(t,e)}},{key:"hasMany",value:function(t,e){var r=this;return(0,s.isEmpty)(e)?[]:e.map((function(e){return r.store.peekOrCreateRecord(i.default.singular(t),e)}))}},{key:"push",value:function(t,e){return(0,s.addObject)(this[t],e),this.store.pushRecord(this.type,this)}},{key:"remove",value:function(t,e){return(0,s.removeObject)(this[t],e),this.store.pushRecord(this.type,this)}},{key:"save",value:(h=l(regeneratorRuntime.mark((function t(){var e,r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,(0,s.timeout)(300);case 3:if(e=this.store.serializerFor(this.type).serialize(this),!this.id){t.next=10;break}return t.next=7,this.update(e);case 7:t.t0=t.sent,t.next=13;break;case 10:return t.next=12,this.create(e);case 12:t.t0=t.sent;case 13:return r=t.t0,n=this.store.serializerFor(this.type).normalize(r.data,r.included,r.meta),(0,c.default)("Server Response: ",n),this.updateProps(n),t.abrupt("return",n);case 20:throw t.prev=20,t.t1=t.catch(0),t.t1;case 23:case"end":return t.stop()}}),t,this,[[0,20]])}))),function(){return h.apply(this,arguments)})},{key:"create",value:(f=l(regeneratorRuntime.mark((function t(e){var r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,r=this.store.adapterFor(this.type).urlForCreateRecord(this.type),t.next=4,u.default.post(r,e);case 4:return n=t.sent,t.abrupt("return",n.data);case 8:throw t.prev=8,t.t0=t.catch(0),t.t0;case 11:case"end":return t.stop()}}),t,this,[[0,8]])}))),function(t){return f.apply(this,arguments)})},{key:"update",value:(r=l(regeneratorRuntime.mark((function t(e){var r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,r=this.store.adapterFor(this.type).urlForUpdateRecord(this.type,this.id),t.next=4,u.default.put(r,e);case 4:return n=t.sent,t.abrupt("return",n.data);case 8:throw t.prev=8,t.t0=t.catch(0),t.t0;case 11:case"end":return t.stop()}}),t,this,[[0,8]])}))),function(t){return r.apply(this,arguments)})},{key:"destroy",value:(e=l(regeneratorRuntime.mark((function t(){var e,r,n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,(0,s.timeout)(300);case 3:return e=this.store.adapterFor(this.type).urlForDestroyRecord(this.type,this.id),t.next=6,u.default.delete(e);case 6:return r=t.sent,n=this.store.serializerFor(this.type).normalize(r.data,r.included,r.meta),(0,c.default)("Server Response: ",n),this.store.removeRecord(this.type,this),t.abrupt("return",this);case 13:throw t.prev=13,t.t0=t.catch(0),t.t0;case 16:case"end":return t.stop()}}),t,this,[[0,13]])}))),function(){return e.apply(this,arguments)})}]),t}();e.default=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AppModel=e.AppSerializer=e.AppAdapter=e.withStore=e.StoreContext=void 0;var n=r(103),o=a(r(38)),i=a(r(70)),u=a(r(101));function a(t){return t&&t.__esModule?t:{default:t}}e.StoreContext=n.StoreContext,e.withStore=n.withStore,e.AppAdapter=o.default,e.AppSerializer=i.default,e.AppModel=u.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.withStore=e.StoreContext=e.Store=void 0;var n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(24),u=h(i),a=(h(r(38)),h(r(120))),s=h(r(122)),c=h(r(273)),f=h(r(274)),l=r(25),p=h(r(59));function h(t){return t&&t.__esModule?t:{default:t}}function d(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function v(t){return function(){var e=t.apply(this,arguments);return new Promise((function(t,r){return function n(o,i){try{var u=e[o](i),a=u.value}catch(t){return void r(t)}if(!u.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));t(a)}("next")}))}}function y(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function m(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function g(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var b=e.Store=u.default.createContext(),x=function(t){function e(t){y(this,e);var r=m(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.state={apiDomain:r.props.apiDomain||"",adapterFor:r.adapterFor.bind(r),modelFor:r.modelFor.bind(r),serializerFor:r.serializerFor.bind(r),createRecord:r.createRecord.bind(r),pushAll:r.pushAll.bind(r),pushRecord:r.pushRecord.bind(r),peekAll:r.peekAll.bind(r),peekRecord:r.peekRecord.bind(r),peekOrCreateRecord:r.peekOrCreateRecord.bind(r),updateRecord:r.updateRecord.bind(r),updateStore:r.updateStore.bind(r),findAll:r.findAll.bind(r),findRecord:r.findRecord.bind(r),query:r.query.bind(r),queryRecord:r.queryRecord.bind(r),apiRequest:r.apiRequest.bind(r),removeAll:r.removeAll.bind(r),removeRecord:r.removeRecord.bind(r),isLoaded:!0},r}var r,n,i,h,x,w,j,_,R;return g(e,t),o(e,[{key:"componentDidMount",value:function(){var t=this;this.adapterFor("").then((function(e){e.set("apiDomain",t.state.apiDomain),console.log("apiDomain: ",e.get("apiDomain")),t.setState({isLoaded:!0})}))}},{key:"adapterFor",value:function(t){return(0,a.default)(t,this.state)}},{key:"modelFor",value:function(t,e){return(0,c.default)(t,this.state,e)}},{key:"serializerFor",value:function(t,e){return(0,s.default)(t,this.state,e)}},{key:"createRecord",value:(R=v(regeneratorRuntime.mark((function t(e,r){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,c.default)(e,this.state,r);case 2:return n=t.sent,t.abrupt("return",this.pushRecord(e,n));case 4:case"end":return t.stop()}}),t,this)}))),function(t,e){return R.apply(this,arguments)})},{key:"updateRecord",value:(_=v(regeneratorRuntime.mark((function t(e,r,n){var o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.state,this.removeRecord(e,r),t.next=4,this.createRecord(e,n);case 4:return o=t.sent,t.abrupt("return",o);case 6:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return _.apply(this,arguments)})},{key:"updateStore",value:function(t){this.state;var e=this.state[t]||[];return this.setState(d({},t,e)),logger("Store: ",this.state),!0}},{key:"peekAll",value:function(t){return this.state[t]||[]}},{key:"peekRecord",value:function(t,e){var r=(this.state[t]||[]).find((function(t){return t.id==e}));return r||{}}},{key:"peekOrCreateRecord",value:(j=v(regeneratorRuntime.mark((function t(e,r){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.state[e],n=this.peekRecord(e,r.id),t.abrupt("return",n||this.createRecord(e,r));case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return j.apply(this,arguments)})},{key:"pushAll",value:(w=v(regeneratorRuntime.mark((function t(e,r){var n,o=this;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.state,this.state[e],n=r.map(function(){var t=v(regeneratorRuntime.mark((function t(r){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(n=o.peekRecord(e,r.id))){t.next=5;break}return t.next=4,o.updateRecord(e,n,r);case 4:return t.abrupt("return",t.sent);case 5:return t.next=7,o.createRecord(e,r);case 7:return t.abrupt("return",t.sent);case 8:case"end":return t.stop()}}),t,o)})));return function(e){return t.apply(this,arguments)}}()),t.next=5,Promise.all(n);case 5:return t.abrupt("return",t.sent);case 6:case"end":return t.stop()}}),t,this)}))),function(t,e){return w.apply(this,arguments)})},{key:"pushRecord",value:function(t,e){this.state;var r=this.state[t]||[];return r.push(e),this.setState(d({},t,r)),(0,p.default)("Store: ",this.state),e}},{key:"findAll",value:(x=v(regeneratorRuntime.mark((function t(e,r){var n,o,i,u;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,n=this.state[e]||[],(0,l.isEmpty)(n)){t.next=4;break}return t.abrupt("return",n);case 4:return t.next=6,this.adapterFor(e).then((function(t){return t.findAll(e,r)}));case 6:return o=t.sent,t.next=9,this.serializerFor(e).then((function(t){return t.normalizeArray(o.data,o.included,o.meta)}));case 9:return i=t.sent,t.next=12,this.pushAll(e,i.records);case 12:return(u=t.sent).meta=i.meta,(0,p.default)("Store: ",this.state),t.abrupt("return",u);case 18:throw t.prev=18,t.t0=t.catch(0),f.default.formatErrors(t.t0);case 21:case"end":return t.stop()}}),t,this,[[0,18]])}))),function(t,e){return x.apply(this,arguments)})},{key:"findRecord",value:(h=v(regeneratorRuntime.mark((function t(e,r,n){var o,i,u,a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,!(o=this.peekRecord(e,r))){t.next=4;break}return t.abrupt("return",o);case 4:return t.next=6,this.adapterFor(e).then((function(t){return t.findRecord(e,r,n)}));case 6:return i=t.sent,t.next=9,this.serializerFor(e).then((function(t){return t.normalize(i.data,i.included)}));case 9:return u=t.sent,t.next=12,this.createRecord(e,u);case 12:return a=t.sent,(0,p.default)("Store: ",this.state),t.abrupt("return",a);case 17:throw t.prev=17,t.t0=t.catch(0),f.default.formatErrors(t.t0);case 20:case"end":return t.stop()}}),t,this,[[0,17]])}))),function(t,e,r){return h.apply(this,arguments)})},{key:"query",value:(i=v(regeneratorRuntime.mark((function t(e,r){var n,o,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.adapterFor(e).then((function(t){return t.query(e,r)}));case 3:return n=t.sent,t.next=6,this.serializerFor(e).then((function(t){return t.normalizeArray(n.data,n.included,n.meta)}));case 6:return o=t.sent,t.next=9,this.pushAll(e,o.records);case 9:return(i=t.sent).meta=o.meta,(0,p.default)("Models: ",i),(0,p.default)("Store: ",this.state),t.abrupt("return",i);case 16:throw t.prev=16,t.t0=t.catch(0),f.default.formatErrors(t.t0);case 19:case"end":return t.stop()}}),t,this,[[0,16]])}))),function(t,e){return i.apply(this,arguments)})},{key:"queryRecord",value:(n=v(regeneratorRuntime.mark((function t(e,r,n){var o,i,u,a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.adapterFor(e).then((function(t){return t.queryRecord(e,r,n)}));case 3:return o=t.sent,i=this.serializerFor(e).then((function(t){return t.normalize(o.data,o.included)})),u=this.peekRecord(e,i.id),a=u?this.updateRecord(e,u,i):this.createRecord(e,i),(0,p.default)("Store: ",this.state),t.abrupt("return",a);case 11:throw t.prev=11,t.t0=t.catch(0),f.default.formatErrors(t.t0);case 14:case"end":return t.stop()}}),t,this,[[0,11]])}))),function(t,e,r){return n.apply(this,arguments)})},{key:"apiRequest",value:(r=v(regeneratorRuntime.mark((function t(e,r,n){var o,i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.adapterFor(e).then((function(t){return t.queryRecord(e,r,n)}));case 3:return o=t.sent,i=this.serializerFor(e).then((function(t){return t.normalize(o.data,o.included)})),(0,p.default)("Server Response: ",i),t.abrupt("return",i);case 9:throw t.prev=9,t.t0=t.catch(0),t.t0;case 12:case"end":return t.stop()}}),t,this,[[0,9]])}))),function(t,e,n){return r.apply(this,arguments)})},{key:"removeAll",value:function(t,e){var r=this.state;return r[t]=[],this.setState(r),(0,p.default)("Store: ",r),null}},{key:"removeRecord",value:function(t,e){var r=this.state,n=r[t]||[],o=n.find((function(t){return t.id==e.id}));return n=(0,l.removeObject)(n,o),this.setState(r),(0,p.default)("Store: ",this.state),null}},{key:"render",value:function(){return this.state.isLoaded?u.default.createElement(b.Provider,{value:this.state},this.props.children):null}}]),e}(i.Component);e.StoreContext=x,e.withStore=function(t){return function(e){function r(){return y(this,r),m(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return g(r,e),o(r,[{key:"render",value:function(){var e=this;return u.default.createElement(b.Consumer,null,(function(r){return u.default.createElement(t,n({store:r},e.props))}))}}]),r}(i.Component)}},function(t,e,r){"use strict";var n=r(3),o=r(61),i=r(105),u=r(68);function a(t){var e=new i(t),r=o(i.prototype.request,e);return n.extend(r,i.prototype,e),n.extend(r,e),r}var s=a(r(64));s.Axios=i,s.create=function(t){return a(u(s.defaults,t))},s.Cancel=r(69),s.CancelToken=r(118),s.isCancel=r(63),s.all=function(t){return Promise.all(t)},s.spread=r(119),t.exports=s,t.exports.default=s},function(t,e,r){"use strict";var n=r(3),o=r(62),i=r(106),u=r(107),a=r(68);function s(t){this.defaults=t,this.interceptors={request:new i,response:new i}}s.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[u,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)r=r.then(e.shift(),e.shift());return r},s.prototype.getUri=function(t){return t=a(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(t){s.prototype[t]=function(e,r){return this.request(n.merge(r||{},{method:t,url:e}))}})),n.forEach(["post","put","patch"],(function(t){s.prototype[t]=function(e,r,o){return this.request(n.merge(o||{},{method:t,url:e,data:r}))}})),t.exports=s},function(t,e,r){"use strict";var n=r(3);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){n.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=o},function(t,e,r){"use strict";var n=r(3),o=r(108),i=r(63),u=r(64);function a(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return a(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=n.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||u.adapter)(t).then((function(e){return a(t),e.data=o(e.data,e.headers,t.transformResponse),e}),(function(e){return i(e)||(a(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e,r){return n.forEach(r,(function(r){t=r(t,e)})),t}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){n.forEach(t,(function(r,n){n!==e&&n.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[n])}))}},function(t,e,r){"use strict";var n=r(67);t.exports=function(t,e,r){var o=r.config.validateStatus;!o||o(r.status)?t(r):e(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(t,e,r){"use strict";t.exports=function(t,e,r,n,o){return t.config=e,r&&(t.code=r),t.request=n,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,e,r){"use strict";var n=r(113),o=r(114);t.exports=function(t,e){return t&&!n(e)?o(t,e):e}},function(t,e,r){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,r){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,r){"use strict";var n=r(3),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,i,u={};return t?(n.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),e=n.trim(t.substr(0,i)).toLowerCase(),r=n.trim(t.substr(i+1)),e){if(u[e]&&o.indexOf(e)>=0)return;u[e]="set-cookie"===e?(u[e]?u[e]:[]).concat([r]):u[e]?u[e]+", "+r:r}})),u):u}},function(t,e,r){"use strict";var n=r(3);t.exports=n.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(t){var n=t;return e&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=o(window.location.href),function(e){var r=n.isString(e)?o(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},function(t,e,r){"use strict";var n=r(3);t.exports=n.isStandardBrowserEnv()?{write:function(t,e,r,o,i,u){var a=[];a.push(t+"="+encodeURIComponent(e)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(i)&&a.push("domain="+i),!0===u&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,r){"use strict";var n=r(69);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;t((function(t){r.reason||(r.reason=new n(t),e(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o((function(e){t=e})),cancel:t}},t.exports=o},function(t,e,r){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o,i=(n=regeneratorRuntime.mark((function t(e,r){var n,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,import("adapters");case 2:return n=t.sent,console.log("modules: ",n),o=n[(0,a.dashToCapital)(e)],t.abrupt("return",o||u.default);case 6:case"end":return t.stop()}}),t,this)})),o=function(){var t=n.apply(this,arguments);return new Promise((function(e,r){return function n(o,i){try{var u=t[o](i),a=u.value}catch(t){return void r(t)}if(!u.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));e(a)}("next")}))},function(t,e){return o.apply(this,arguments)}),u=(s(r(121)),s(r(38))),a=r(19);function s(t){return t&&t.__esModule?t:{default:t}}e.default=i},function(t,e,r){(function(t){function r(t,e){for(var r=0,n=t.length-1;n>=0;n--){var o=t[n];"."===o?t.splice(n,1):".."===o?(t.splice(n,1),r++):r&&(t.splice(n,1),r--)}if(e)for(;r--;r)t.unshift("..");return t}function n(t,e){if(t.filter)return t.filter(e);for(var r=[],n=0;n<t.length;n++)e(t[n],n,t)&&r.push(t[n]);return r}e.resolve=function(){for(var e="",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var u=i>=0?arguments[i]:t.cwd();if("string"!=typeof u)throw new TypeError("Arguments to path.resolve must be strings");u&&(e=u+"/"+e,o="/"===u.charAt(0))}return(o?"/":"")+(e=r(n(e.split("/"),(function(t){return!!t})),!o).join("/"))||"."},e.normalize=function(t){var i=e.isAbsolute(t),u="/"===o(t,-1);return(t=r(n(t.split("/"),(function(t){return!!t})),!i).join("/"))||i||(t="."),t&&u&&(t+="/"),(i?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(n(t,(function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t})).join("/"))},e.relative=function(t,r){function n(t){for(var e=0;e<t.length&&""===t[e];e++);for(var r=t.length-1;r>=0&&""===t[r];r--);return e>r?[]:t.slice(e,r-e+1)}t=e.resolve(t).substr(1),r=e.resolve(r).substr(1);for(var o=n(t.split("/")),i=n(r.split("/")),u=Math.min(o.length,i.length),a=u,s=0;s<u;s++)if(o[s]!==i[s]){a=s;break}var c=[];for(s=a;s<o.length;s++)c.push("..");return(c=c.concat(i.slice(a))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){if("string"!=typeof t&&(t+=""),0===t.length)return".";for(var e=t.charCodeAt(0),r=47===e,n=-1,o=!0,i=t.length-1;i>=1;--i)if(47===(e=t.charCodeAt(i))){if(!o){n=i;break}}else o=!1;return-1===n?r?"/":".":r&&1===n?"/":t.slice(0,n)},e.basename=function(t,e){var r=function(t){"string"!=typeof t&&(t+="");var e,r=0,n=-1,o=!0;for(e=t.length-1;e>=0;--e)if(47===t.charCodeAt(e)){if(!o){r=e+1;break}}else-1===n&&(o=!1,n=e+1);return-1===n?"":t.slice(r,n)}(t);return e&&r.substr(-1*e.length)===e&&(r=r.substr(0,r.length-e.length)),r},e.extname=function(t){"string"!=typeof t&&(t+="");for(var e=-1,r=0,n=-1,o=!0,i=0,u=t.length-1;u>=0;--u){var a=t.charCodeAt(u);if(47!==a)-1===n&&(o=!1,n=u+1),46===a?-1===e?e=u:1!==i&&(i=1):-1!==e&&(i=-1);else if(!o){r=u+1;break}}return-1===e||-1===n||0===i||1===i&&e===n-1&&e===r+1?"":t.slice(e,n)};var o="b"==="ab".substr(-1)?function(t,e,r){return t.substr(e,r)}:function(t,e,r){return e<0&&(e=t.length+e),t.substr(e,r)}}).call(this,r(65))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o,i,u=(n=regeneratorRuntime.mark((function t(e,r){var n,o,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,import("serializers");case 2:return n=t.sent,console.log("Serializers: ",n),o=n[(0,c.dashToCapital)(e)],t.abrupt("return",o?new o(r,i):new s.default(r,i));case 6:case"end":return t.stop()}}),t,this)})),o=function(){var t=n.apply(this,arguments);return new Promise((function(e,r){return function n(o,i){try{var u=t[o](i),a=u.value}catch(t){return void r(t)}if(!u.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));e(a)}("next")}))},function(t,e){return o.apply(this,arguments)}),a=r(70),s=(i=a)&&i.__esModule?i:{default:i},c=r(19);e.default=u},function(t,e,r){t.exports={chunk:r(124),compact:r(130),concat:r(131),difference:r(134),differenceBy:r(162),differenceWith:r(204),drop:r(205),dropRight:r(206),dropRightWhile:r(207),dropWhile:r(208),fill:r(209),findIndex:r(213),findLastIndex:r(214),first:r(215),flatten:r(94),flattenDeep:r(216),flattenDepth:r(217),fromPairs:r(218),head:r(93),indexOf:r(219),initial:r(220),intersection:r(221),intersectionBy:r(222),intersectionWith:r(223),join:r(224),last:r(9),lastIndexOf:r(225),nth:r(227),pull:r(229),pullAll:r(95),pullAllBy:r(231),pullAllWith:r(232),pullAt:r(233),remove:r(239),reverse:r(240),slice:r(241),sortedIndex:r(242),sortedIndexBy:r(243),sortedIndexOf:r(244),sortedLastIndex:r(245),sortedLastIndexBy:r(246),sortedLastIndexOf:r(247),sortedUniq:r(248),sortedUniqBy:r(249),tail:r(250),take:r(251),takeRight:r(252),takeRightWhile:r(253),takeWhile:r(254),union:r(255),unionBy:r(258),unionWith:r(259),uniq:r(260),uniqBy:r(261),uniqWith:r(262),unzip:r(57),unzipWith:r(98),without:r(263),xor:r(264),xorBy:r(265),xorWith:r(266),zip:r(267),zipObject:r(268),zipObjectDeep:r(270),zipWith:r(272)}},function(t,e,r){var n=r(6),o=r(40),i=r(2),u=Math.ceil,a=Math.max;t.exports=function(t,e,r){e=(r?o(t,e,r):void 0===e)?1:a(i(e),0);var s=null==t?0:t.length;if(!s||e<1)return[];for(var c=0,f=0,l=Array(u(s/e));c<s;)l[f++]=n(t,c,c+=e);return l}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(21),o=Object.prototype,i=o.hasOwnProperty,u=o.toString,a=n?n.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),r=t[a];try{t[a]=void 0;var n=!0}catch(t){}var o=u.call(t);return n&&(e?t[a]=r:delete t[a]),o}},function(t,e){var r=Object.prototype.toString;t.exports=function(t){return r.call(t)}},function(t,e,r){var n=r(129);t.exports=function(t){return t?(t=n(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}},function(t,e,r){var n=r(16),o=r(13),i=/^\s+|\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,s=/^0o[0-7]+$/i,c=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(o(t))return NaN;if(n(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=n(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(i,"");var r=a.test(t);return r||s.test(t)?c(t.slice(2),r?2:8):u.test(t)?NaN:+t}},function(t,e){t.exports=function(t){for(var e=-1,r=null==t?0:t.length,n=0,o=[];++e<r;){var i=t[e];i&&(o[n++]=i)}return o}},function(t,e,r){var n=r(43),o=r(5),i=r(73),u=r(7);t.exports=function(){var t=arguments.length;if(!t)return[];for(var e=Array(t-1),r=arguments[0],a=t;a--;)e[a-1]=arguments[a];return n(u(r)?i(r):[r],o(e,1))}},function(t,e,r){var n=r(21),o=r(44),i=r(7),u=n?n.isConcatSpreadable:void 0;t.exports=function(t){return i(t)||o(t)||!!(u&&t&&t[u])}},function(t,e,r){var n=r(20),o=r(17);t.exports=function(t){return o(t)&&"[object Arguments]"==n(t)}},function(t,e,r){var n=r(22),o=r(5),i=r(0),u=r(4),a=i((function(t,e){return u(t)?n(t,o(e,1,u,!0)):[]}));t.exports=a},function(t,e,r){var n=r(136),o=r(28),i=r(46);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||o),string:new n}}},function(t,e,r){var n=r(137),o=r(142),i=r(143),u=r(144),a=r(145);function s(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}s.prototype.clear=n,s.prototype.delete=o,s.prototype.get=i,s.prototype.has=u,s.prototype.set=a,t.exports=s},function(t,e,r){var n=r(27);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},function(t,e,r){var n=r(71),o=r(139),i=r(16),u=r(74),a=/^\[object .+?Constructor\]$/,s=Function.prototype,c=Object.prototype,f=s.toString,l=c.hasOwnProperty,p=RegExp("^"+f.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(n(t)?p:a).test(u(t))}},function(t,e,r){var n,o=r(140),i=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!i&&i in t}},function(t,e,r){var n=r(10)["__core-js_shared__"];t.exports=n},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,r){var n=r(27),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},function(t,e,r){var n=r(27),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},function(t,e,r){var n=r(27);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,r){var n=r(29),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0)&&(r==e.length-1?e.pop():o.call(e,r,1),--this.size,!0)}},function(t,e,r){var n=r(29);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},function(t,e,r){var n=r(29);t.exports=function(t){return n(this.__data__,t)>-1}},function(t,e,r){var n=r(29);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},function(t,e,r){var n=r(30);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,r){var n=r(30);t.exports=function(t){return n(this,t).get(t)}},function(t,e,r){var n=r(30);t.exports=function(t){return n(this,t).has(t)}},function(t,e,r){var n=r(30);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},function(t,e){t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e){t.exports=function(t,e,r){for(var n=r-1,o=t.length;++n<o;)if(t[n]===e)return n;return-1}},function(t,e,r){var n=r(160),o=r(79),i=r(34),u=o?function(t,e){return o(t,"toString",{configurable:!0,enumerable:!1,value:n(e),writable:!0})}:i;t.exports=u},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e){var r=Date.now;t.exports=function(t){var e=0,n=0;return function(){var o=r(),i=16-(o-n);if(n=o,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e,r){var n=r(22),o=r(5),i=r(1),u=r(0),a=r(4),s=r(9),c=u((function(t,e){var r=s(e);return a(r)&&(r=void 0),a(t)?n(t,o(e,1,a,!0),i(r,2)):[]}));t.exports=c},function(t,e,r){var n=r(164),o=r(192),i=r(90);t.exports=function(t){var e=o(t);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(r){return r===t||n(r,t,e)}}},function(t,e,r){var n=r(80),o=r(81);t.exports=function(t,e,r,i){var u=r.length,a=u,s=!i;if(null==t)return!a;for(t=Object(t);u--;){var c=r[u];if(s&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++u<a;){var f=(c=r[u])[0],l=t[f],p=c[1];if(s&&c[2]){if(void 0===l&&!(f in t))return!1}else{var h=new n;if(i)var d=i(l,p,f,t,e,h);if(!(void 0===d?o(p,l,3,i,h):d))return!1}}return!0}},function(t,e,r){var n=r(28);t.exports=function(){this.__data__=new n,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,r){var n=r(28),o=r(46),i=r(45);t.exports=function(t,e){var r=this.__data__;if(r instanceof n){var u=r.__data__;if(!o||u.length<199)return u.push([t,e]),this.size=++r.size,this;r=this.__data__=new i(u)}return r.set(t,e),this.size=r.size,this}},function(t,e,r){var n=r(80),o=r(82),i=r(172),u=r(175),a=r(188),s=r(7),c=r(85),f=r(87),l="[object Object]",p=Object.prototype.hasOwnProperty;t.exports=function(t,e,r,h,d,v){var y=s(t),m=s(e),g=y?"[object Array]":a(t),b=m?"[object Array]":a(e),x=(g="[object Arguments]"==g?l:g)==l,w=(b="[object Arguments]"==b?l:b)==l,j=g==b;if(j&&c(t)){if(!c(e))return!1;y=!0,x=!1}if(j&&!x)return v||(v=new n),y||f(t)?o(t,e,r,h,d,v):i(t,e,g,r,h,d,v);if(!(1&r)){var _=x&&p.call(t,"__wrapped__"),R=w&&p.call(e,"__wrapped__");if(_||R){var k=_?t.value():t,A=R?e.value():e;return v||(v=new n),d(k,A,r,h,v)}}return!!j&&(v||(v=new n),u(t,e,r,h,d,v))}},function(t,e){t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}},function(t,e,r){var n=r(21),o=r(173),i=r(11),u=r(82),a=r(174),s=r(50),c=n?n.prototype:void 0,f=c?c.valueOf:void 0;t.exports=function(t,e,r,n,c,l,p){switch(r){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!l(new o(t),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var h=a;case"[object Set]":var d=1&n;if(h||(h=s),t.size!=e.size&&!d)return!1;var v=p.get(t);if(v)return v==e;n|=2,p.set(t,e);var y=u(h(t),h(e),n,c,l,p);return p.delete(t),y;case"[object Symbol]":if(f)return f.call(t)==f.call(e)}return!1}},function(t,e,r){var n=r(10).Uint8Array;t.exports=n},function(t,e){t.exports=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}},function(t,e,r){var n=r(176),o=Object.prototype.hasOwnProperty;t.exports=function(t,e,r,i,u,a){var s=1&r,c=n(t),f=c.length;if(f!=n(e).length&&!s)return!1;for(var l=f;l--;){var p=c[l];if(!(s?p in e:o.call(e,p)))return!1}var h=a.get(t);if(h&&a.get(e))return h==e;var d=!0;a.set(t,e),a.set(e,t);for(var v=s;++l<f;){var y=t[p=c[l]],m=e[p];if(i)var g=s?i(m,y,p,e,t,a):i(y,m,p,t,e,a);if(!(void 0===g?y===m||u(y,m,r,i,a):g)){d=!1;break}v||(v="constructor"==p)}if(d&&!v){var b=t.constructor,x=e.constructor;b==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof x&&x instanceof x||(d=!1)}return a.delete(t),a.delete(e),d}},function(t,e,r){var n=r(177),o=r(178),i=r(83);t.exports=function(t){return n(t,i,o)}},function(t,e,r){var n=r(43),o=r(7);t.exports=function(t,e,r){var i=e(t);return o(t)?i:n(i,r(t))}},function(t,e,r){var n=r(23),o=r(179),i=Object.prototype.propertyIsEnumerable,u=Object.getOwnPropertySymbols,a=u?function(t){return null==t?[]:(t=Object(t),n(u(t),(function(e){return i.call(t,e)})))}:o;t.exports=a},function(t,e){t.exports=function(){return[]}},function(t,e,r){var n=r(84),o=r(44),i=r(7),u=r(85),a=r(12),s=r(87),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var r=i(t),f=!r&&o(t),l=!r&&!f&&u(t),p=!r&&!f&&!l&&s(t),h=r||f||l||p,d=h?n(t.length,String):[],v=d.length;for(var y in t)!e&&!c.call(t,y)||h&&("length"==y||l&&("offset"==y||"parent"==y)||p&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||a(y,v))||d.push(y);return d}},function(t,e){t.exports=function(){return!1}},function(t,e,r){var n=r(20),o=r(42),i=r(17),u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u["[object Arguments]"]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u["[object Map]"]=u["[object Number]"]=u["[object Object]"]=u["[object RegExp]"]=u["[object Set]"]=u["[object String]"]=u["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!u[n(t)]}},function(t,e,r){(function(t){var n=r(72),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,u=i&&i.exports===o&&n.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||u&&u.binding&&u.binding("util")}catch(t){}}();t.exports=a}).call(this,r(86)(t))},function(t,e,r){var n=r(185),o=r(186),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return o(t);var e=[];for(var r in Object(t))i.call(t,r)&&"constructor"!=r&&e.push(r);return e}},function(t,e){var r=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||r)}},function(t,e,r){var n=r(187)(Object.keys,Object);t.exports=n},function(t,e){t.exports=function(t,e){return function(r){return t(e(r))}}},function(t,e,r){var n=r(189),o=r(46),i=r(190),u=r(88),a=r(191),s=r(20),c=r(74),f=c(n),l=c(o),p=c(i),h=c(u),d=c(a),v=s;(n&&"[object DataView]"!=v(new n(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||u&&"[object Set]"!=v(new u)||a&&"[object WeakMap]"!=v(new a))&&(v=function(t){var e=s(t),r="[object Object]"==e?t.constructor:void 0,n=r?c(r):"";if(n)switch(n){case f:return"[object DataView]";case l:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case d:return"[object WeakMap]"}return e}),t.exports=v},function(t,e,r){var n=r(14)(r(10),"DataView");t.exports=n},function(t,e,r){var n=r(14)(r(10),"Promise");t.exports=n},function(t,e,r){var n=r(14)(r(10),"WeakMap");t.exports=n},function(t,e,r){var n=r(89),o=r(83);t.exports=function(t){for(var e=o(t),r=e.length;r--;){var i=e[r],u=t[i];e[r]=[i,u,n(u)]}return e}},function(t,e,r){var n=r(81),o=r(91),i=r(199),u=r(52),a=r(89),s=r(90),c=r(18);t.exports=function(t,e){return u(t)&&a(e)?s(c(t),e):function(r){var u=o(r,t);return void 0===u&&u===e?i(r,t):n(e,u,3)}}},function(t,e,r){var n=r(195),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,u=n((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(o,(function(t,r,n,o){e.push(n?o.replace(i,"$1"):r||t)})),e}));t.exports=u},function(t,e,r){var n=r(196);t.exports=function(t){var e=n(t,(function(t){return 500===r.size&&r.clear(),t})),r=e.cache;return e}},function(t,e,r){var n=r(45);function o(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var u=t.apply(this,n);return r.cache=i.set(o,u)||i,u};return r.cache=new(o.Cache||n),r}o.Cache=n,t.exports=o},function(t,e,r){var n=r(198);t.exports=function(t){return null==t?"":n(t)}},function(t,e,r){var n=r(21),o=r(8),i=r(7),u=r(13),a=n?n.prototype:void 0,s=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(i(e))return o(e,t)+"";if(u(e))return s?s.call(e):"";var r=e+"";return"0"==r&&1/e==-1/0?"-0":r}},function(t,e,r){var n=r(200),o=r(201);t.exports=function(t,e){return null!=t&&o(t,e,n)}},function(t,e){t.exports=function(t,e){return null!=t&&e in Object(t)}},function(t,e,r){var n=r(35),o=r(44),i=r(7),u=r(12),a=r(42),s=r(18);t.exports=function(t,e,r){for(var c=-1,f=(e=n(e,t)).length,l=!1;++c<f;){var p=s(e[c]);if(!(l=null!=t&&r(t,p)))break;t=t[p]}return l||++c!=f?l:!!(f=null==t?0:t.length)&&a(f)&&u(p,f)&&(i(t)||o(t))}},function(t,e,r){var n=r(92),o=r(203),i=r(52),u=r(18);t.exports=function(t){return i(t)?n(u(t)):o(t)}},function(t,e,r){var n=r(51);t.exports=function(t){return function(e){return n(e,t)}}},function(t,e,r){var n=r(22),o=r(5),i=r(0),u=r(4),a=r(9),s=i((function(t,e){var r=a(e);return u(r)&&(r=void 0),u(t)?n(t,o(e,1,u,!0),void 0,r):[]}));t.exports=s},function(t,e,r){var n=r(6),o=r(2);t.exports=function(t,e,r){var i=null==t?0:t.length;return i?(e=r||void 0===e?1:o(e),n(t,e<0?0:e,i)):[]}},function(t,e,r){var n=r(6),o=r(2);t.exports=function(t,e,r){var i=null==t?0:t.length;return i?(e=r||void 0===e?1:o(e),n(t,0,(e=i-e)<0?0:e)):[]}},function(t,e,r){var n=r(1),o=r(36);t.exports=function(t,e){return t&&t.length?o(t,n(e,3),!0,!0):[]}},function(t,e,r){var n=r(1),o=r(36);t.exports=function(t,e){return t&&t.length?o(t,n(e,3),!0):[]}},function(t,e,r){var n=r(210),o=r(40);t.exports=function(t,e,r,i){var u=null==t?0:t.length;return u?(r&&"number"!=typeof r&&o(t,e,r)&&(r=0,i=u),n(t,e,r,i)):[]}},function(t,e,r){var n=r(2),o=r(211);t.exports=function(t,e,r,i){var u=t.length;for((r=n(r))<0&&(r=-r>u?0:u+r),(i=void 0===i||i>u?u:n(i))<0&&(i+=u),i=r>i?0:o(i);r<i;)t[r++]=e;return t}},function(t,e,r){var n=r(212),o=r(2);t.exports=function(t){return t?n(o(t),0,4294967295):0}},function(t,e){t.exports=function(t,e,r){return t==t&&(void 0!==r&&(t=t<=r?t:r),void 0!==e&&(t=t>=e?t:e)),t}},function(t,e,r){var n=r(31),o=r(1),i=r(2),u=Math.max;t.exports=function(t,e,r){var a=null==t?0:t.length;if(!a)return-1;var s=null==r?0:i(r);return s<0&&(s=u(a+s,0)),n(t,o(e,3),s)}},function(t,e,r){var n=r(31),o=r(1),i=r(2),u=Math.max,a=Math.min;t.exports=function(t,e,r){var s=null==t?0:t.length;if(!s)return-1;var c=s-1;return void 0!==r&&(c=i(r),c=r<0?u(s+c,0):a(c,s-1)),n(t,o(e,3),c,!0)}},function(t,e,r){t.exports=r(93)},function(t,e,r){var n=r(5);t.exports=function(t){return(null==t?0:t.length)?n(t,1/0):[]}},function(t,e,r){var n=r(5),o=r(2);t.exports=function(t,e){return(null==t?0:t.length)?(e=void 0===e?1:o(e),n(t,e)):[]}},function(t,e){t.exports=function(t){for(var e=-1,r=null==t?0:t.length,n={};++e<r;){var o=t[e];n[o[0]]=o[1]}return n}},function(t,e,r){var n=r(48),o=r(2),i=Math.max;t.exports=function(t,e,r){var u=null==t?0:t.length;if(!u)return-1;var a=null==r?0:o(r);return a<0&&(a=i(u+a,0)),n(t,e,a)}},function(t,e,r){var n=r(6);t.exports=function(t){return(null==t?0:t.length)?n(t,0,-1):[]}},function(t,e,r){var n=r(8),o=r(53),i=r(0),u=r(54),a=i((function(t){var e=n(t,u);return e.length&&e[0]===t[0]?o(e):[]}));t.exports=a},function(t,e,r){var n=r(8),o=r(53),i=r(1),u=r(0),a=r(54),s=r(9),c=u((function(t){var e=s(t),r=n(t,a);return e===s(r)?e=void 0:r.pop(),r.length&&r[0]===t[0]?o(r,i(e,2)):[]}));t.exports=c},function(t,e,r){var n=r(8),o=r(53),i=r(0),u=r(54),a=r(9),s=i((function(t){var e=a(t),r=n(t,u);return(e="function"==typeof e?e:void 0)&&r.pop(),r.length&&r[0]===t[0]?o(r,void 0,e):[]}));t.exports=s},function(t,e){var r=Array.prototype.join;t.exports=function(t,e){return null==t?"":r.call(t,e)}},function(t,e,r){var n=r(31),o=r(75),i=r(226),u=r(2),a=Math.max,s=Math.min;t.exports=function(t,e,r){var c=null==t?0:t.length;if(!c)return-1;var f=c;return void 0!==r&&(f=(f=u(r))<0?a(c+f,0):s(f,c-1)),e==e?i(t,e,f):n(t,o,f,!0)}},function(t,e){t.exports=function(t,e,r){for(var n=r+1;n--;)if(t[n]===e)return n;return n}},function(t,e,r){var n=r(228),o=r(2);t.exports=function(t,e){return t&&t.length?n(t,o(e)):void 0}},function(t,e,r){var n=r(12);t.exports=function(t,e){var r=t.length;if(r)return n(e+=e<0?r:0,r)?t[e]:void 0}},function(t,e,r){var n=r(0)(r(95));t.exports=n},function(t,e){t.exports=function(t,e,r,n){for(var o=r-1,i=t.length;++o<i;)if(n(t[o],e))return o;return-1}},function(t,e,r){var n=r(1),o=r(55);t.exports=function(t,e,r){return t&&t.length&&e&&e.length?o(t,e,n(r,2)):t}},function(t,e,r){var n=r(55);t.exports=function(t,e,r){return t&&t.length&&e&&e.length?n(t,e,void 0,r):t}},function(t,e,r){var n=r(8),o=r(234),i=r(96),u=r(237),a=r(238),s=r(12),c=a((function(t,e){var r=null==t?0:t.length,a=o(t,e);return i(t,n(e,(function(t){return s(t,r)?+t:t})).sort(u)),a}));t.exports=c},function(t,e,r){var n=r(91);t.exports=function(t,e){for(var r=-1,o=e.length,i=Array(o),u=null==t;++r<o;)i[r]=u?void 0:n(t,e[r]);return i}},function(t,e,r){var n=r(35),o=r(9),i=r(236),u=r(18);t.exports=function(t,e){return e=n(e,t),null==(t=i(t,e))||delete t[u(o(e))]}},function(t,e,r){var n=r(51),o=r(6);t.exports=function(t,e){return e.length<2?t:n(t,o(e,0,-1))}},function(t,e,r){var n=r(13);t.exports=function(t,e){if(t!==e){var r=void 0!==t,o=null===t,i=t==t,u=n(t),a=void 0!==e,s=null===e,c=e==e,f=n(e);if(!s&&!f&&!u&&t>e||u&&a&&c&&!s&&!f||o&&a&&c||!r&&c||!i)return 1;if(!o&&!u&&!f&&t<e||f&&r&&i&&!o&&!u||s&&r&&i||!a&&i||!c)return-1}return 0}},function(t,e,r){var n=r(94),o=r(76),i=r(78);t.exports=function(t){return i(o(t,void 0,n),t+"")}},function(t,e,r){var n=r(1),o=r(96);t.exports=function(t,e){var r=[];if(!t||!t.length)return r;var i=-1,u=[],a=t.length;for(e=n(e,3);++i<a;){var s=t[i];e(s,i,t)&&(r.push(s),u.push(i))}return o(t,u),r}},function(t,e){var r=Array.prototype.reverse;t.exports=function(t){return null==t?t:r.call(t)}},function(t,e,r){var n=r(6),o=r(40),i=r(2);t.exports=function(t,e,r){var u=null==t?0:t.length;return u?(r&&"number"!=typeof r&&o(t,e,r)?(e=0,r=u):(e=null==e?0:i(e),r=void 0===r?u:i(r)),n(t,e,r)):[]}},function(t,e,r){var n=r(37);t.exports=function(t,e){return n(t,e)}},function(t,e,r){var n=r(1),o=r(56);t.exports=function(t,e,r){return o(t,e,n(r,2))}},function(t,e,r){var n=r(37),o=r(11);t.exports=function(t,e){var r=null==t?0:t.length;if(r){var i=n(t,e);if(i<r&&o(t[i],e))return i}return-1}},function(t,e,r){var n=r(37);t.exports=function(t,e){return n(t,e,!0)}},function(t,e,r){var n=r(1),o=r(56);t.exports=function(t,e,r){return o(t,e,n(r,2),!0)}},function(t,e,r){var n=r(37),o=r(11);t.exports=function(t,e){if(null==t?0:t.length){var r=n(t,e,!0)-1;if(o(t[r],e))return r}return-1}},function(t,e,r){var n=r(97);t.exports=function(t){return t&&t.length?n(t):[]}},function(t,e,r){var n=r(1),o=r(97);t.exports=function(t,e){return t&&t.length?o(t,n(e,2)):[]}},function(t,e,r){var n=r(6);t.exports=function(t){var e=null==t?0:t.length;return e?n(t,1,e):[]}},function(t,e,r){var n=r(6),o=r(2);t.exports=function(t,e,r){return t&&t.length?(e=r||void 0===e?1:o(e),n(t,0,e<0?0:e)):[]}},function(t,e,r){var n=r(6),o=r(2);t.exports=function(t,e,r){var i=null==t?0:t.length;return i?(e=r||void 0===e?1:o(e),n(t,(e=i-e)<0?0:e,i)):[]}},function(t,e,r){var n=r(1),o=r(36);t.exports=function(t,e){return t&&t.length?o(t,n(e,3),!1,!0):[]}},function(t,e,r){var n=r(1),o=r(36);t.exports=function(t,e){return t&&t.length?o(t,n(e,3)):[]}},function(t,e,r){var n=r(5),o=r(0),i=r(15),u=r(4),a=o((function(t){return i(n(t,1,u,!0))}));t.exports=a},function(t,e,r){var n=r(88),o=r(257),i=r(50),u=n&&1/i(new n([,-0]))[1]==1/0?function(t){return new n(t)}:o;t.exports=u},function(t,e){t.exports=function(){}},function(t,e,r){var n=r(5),o=r(1),i=r(0),u=r(15),a=r(4),s=r(9),c=i((function(t){var e=s(t);return a(e)&&(e=void 0),u(n(t,1,a,!0),o(e,2))}));t.exports=c},function(t,e,r){var n=r(5),o=r(0),i=r(15),u=r(4),a=r(9),s=o((function(t){var e=a(t);return e="function"==typeof e?e:void 0,i(n(t,1,u,!0),void 0,e)}));t.exports=s},function(t,e,r){var n=r(15);t.exports=function(t){return t&&t.length?n(t):[]}},function(t,e,r){var n=r(1),o=r(15);t.exports=function(t,e){return t&&t.length?o(t,n(e,2)):[]}},function(t,e,r){var n=r(15);t.exports=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?n(t,void 0,e):[]}},function(t,e,r){var n=r(22),o=r(0),i=r(4),u=o((function(t,e){return i(t)?n(t,e):[]}));t.exports=u},function(t,e,r){var n=r(23),o=r(0),i=r(58),u=r(4),a=o((function(t){return i(n(t,u))}));t.exports=a},function(t,e,r){var n=r(23),o=r(1),i=r(0),u=r(58),a=r(4),s=r(9),c=i((function(t){var e=s(t);return a(e)&&(e=void 0),u(n(t,a),o(e,2))}));t.exports=c},function(t,e,r){var n=r(23),o=r(0),i=r(58),u=r(4),a=r(9),s=o((function(t){var e=a(t);return e="function"==typeof e?e:void 0,i(n(t,u),void 0,e)}));t.exports=s},function(t,e,r){var n=r(0)(r(57));t.exports=n},function(t,e,r){var n=r(99),o=r(100);t.exports=function(t,e){return o(t||[],e||[],n)}},function(t,e,r){var n=r(79);t.exports=function(t,e,r){"__proto__"==e&&n?n(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}},function(t,e,r){var n=r(271),o=r(100);t.exports=function(t,e){return o(t||[],e||[],n)}},function(t,e,r){var n=r(99),o=r(35),i=r(12),u=r(16),a=r(18);t.exports=function(t,e,r,s){if(!u(t))return t;for(var c=-1,f=(e=o(e,t)).length,l=f-1,p=t;null!=p&&++c<f;){var h=a(e[c]),d=r;if(c!=l){var v=p[h];void 0===(d=s?s(v,h,p):void 0)&&(d=u(v)?v:i(e[c+1])?[]:{})}n(p,h,d),p=p[h]}return t}},function(t,e,r){var n=r(0),o=r(98),i=n((function(t){var e=t.length,r=e>1?t[e-1]:void 0;return r="function"==typeof r?(t.pop(),r):void 0,o(t,r)}));t.exports=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o,i,u=(n=regeneratorRuntime.mark((function t(e,r){var n,o,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,import("models");case 2:return n=t.sent,console.log("Models: ",n),o=n[(0,c.dashToCapital)(e)],t.abrupt("return",o?new o(e,r,i):new s.default(e,r,i));case 6:case"end":return t.stop()}}),t,this)})),o=function(){var t=n.apply(this,arguments);return new Promise((function(e,r){return function n(o,i){try{var u=t[o](i),a=u.value}catch(t){return void r(t)}if(!u.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));e(a)}("next")}))},function(t,e){return o.apply(this,arguments)}),a=r(101),s=(i=a)&&i.__esModule?i:{default:i},c=r(19);e.default=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=(r(25),r(59)),u=(n=i)&&n.__esModule?n:{default:n};var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return o(t,null,[{key:"formatErrors",value:function(t){var e=void 0;return t.response?((0,u.default)("Server error: ",t.response.data.errors),e=t.response.data.errors?this.serverErrors(t.response.data.errors):this.miscError(t.response.status,t.response.statusText,"Sorry, there was a server error.")):t.request?((0,u.default)("Request error: ",t.request),e=this.miscError(500,"Request Error",t)):((0,u.default)("App error: ",t),e=this.miscError(500,"Misc Error",t.message)),e}},{key:"miscError",value:function(t,e,r){return[{status:t,title:e,detail:r}]}},{key:"serverErrors",value:function(t){var e=[];return t.forEach((function(t){t.detail=t.detail.replace(/:/g,""),e.push(t)})),e}}]),t}();e.default=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9JbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5pcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS91dGlscy90cmFuc2Zvcm1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VEaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0XCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3V0aWxzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmluZEluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VXaGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU29ydGVkSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2FkYXB0ZXJzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGx1cmFsaXplL3BsdXJhbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0l0ZXJhdGVlQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlc1dpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdEFycmF5TGlrZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHVsbEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU29ydGVkSW5kZXhCeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VuemlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VYb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3V0aWxzL2Rldi1sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3NlcmlhbGl6ZXJzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmFOLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaGVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wdWxsQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQdWxsQXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNvcnRlZFVuaXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC91bnppcFdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVppcE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvbW9kZWxzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2NvbnRleHRzL3N0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9oZWxwZXJzL2FkYXB0ZXItZm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2hlbHBlcnMvc2VyaWFsaXplci1mb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NodW5rLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9GaW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbXBhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNGbGF0dGVuYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmljdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2hvcnRPdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kaWZmZXJlbmNlQnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlTb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hdGNoRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RpZmZlcmVuY2VXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZHJvcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2Ryb3BSaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2Ryb3BSaWdodFdoaWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZHJvcFdoaWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbmRMYXN0SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9maXJzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZsYXR0ZW5EZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmxhdHRlbkRlcHRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZnJvbVBhaXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2luaXRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pbnRlcnNlY3Rpb25CeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ludGVyc2VjdGlvbldpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbGFzdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaWN0TGFzdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU50aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3B1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2ZXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHVsbEFsbEJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHVsbEFsbFdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wdWxsQXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19wYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29tcGFyZUFzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mbGF0UmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3JldmVyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvcnRlZEluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc29ydGVkSW5kZXhCeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvcnRlZEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zb3J0ZWRMYXN0SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zb3J0ZWRMYXN0SW5kZXhCeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvcnRlZExhc3RJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc29ydGVkVW5pcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvcnRlZFVuaXFCeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RhaWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90YWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdGFrZVJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdGFrZVJpZ2h0V2hpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90YWtlV2hpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC91bmlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdW5pb25CeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VuaW9uV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VuaXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC91bmlxQnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC91bmlxV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3dpdGhvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC94b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC94b3JCeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3hvcldpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC96aXBPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvemlwT2JqZWN0RGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvemlwV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvaGVscGVycy9tb2RlbC1mb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3V0aWxzL2pzb24tYXBpLWVycm9ycy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImlkZW50aXR5Iiwib3ZlclJlc3QiLCJzZXRUb1N0cmluZyIsImZ1bmMiLCJzdGFydCIsImJhc2VNYXRjaGVzIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImlzQXJyYXkiLCJ0b0Zpbml0ZSIsInJlc3VsdCIsInJlbWFpbmRlciIsInRvU3RyaW5nIiwidmFsIiwiaXNVbmRlZmluZWQiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJkZWVwTWVyZ2UiLCJleHRlbmQiLCJhIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsImlzQXJyYXlMaWtlIiwiaXNPYmplY3RMaWtlIiwiYXJyYXlQdXNoIiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGbGF0dGVuIiwiYXJyYXkiLCJkZXB0aCIsInByZWRpY2F0ZSIsImlzU3RyaWN0IiwiaW5kZXgiLCJlbmQiLCJBcnJheSIsIml0ZXJhdGVlIiwidW5kZWZpbmVkIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsIm90aGVyIiwicmVJc1VpbnQiLCJ0eXBlIiwidGVzdCIsImJhc2VHZXRUYWciLCJiYXNlSXNOYXRpdmUiLCJnZXRWYWx1ZSIsIlNldENhY2hlIiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5jbHVkZXNXaXRoIiwiY2FjaGVIYXMiLCJjcmVhdGVTZXQiLCJzZXRUb0FycmF5IiwiY29tcGFyYXRvciIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJzZWVuIiwic2V0Iiwib3V0ZXIiLCJjb21wdXRlZCIsInNlZW5JbmRleCIsInB1c2giLCJpc1N5bWJvbCIsImNhbWVsVG9VbmRlcnNjb3JlIiwidG9Mb3dlckNhc2UiLCJjYW1lbFRvRGFzaCIsImRhc2hUb0NhbWVsIiwiZyIsInRvVXBwZXJDYXNlIiwiZGFzaFRvQ2FwaXRhbCIsInNwbGl0IiwibWFwIiwiY2hhckF0Iiwiam9pbiIsInBob25lVG9TdHJpbmciLCJkYXRhIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsImFycmF5TWFwIiwiYmFzZVVuYXJ5IiwidmFsdWVzIiwidmFsdWVzTGVuZ3RoIiwidmFsdWVzSW5kZXgiLCJyZXNJbmRleCIsInJlcXVpcmUiLCJ0aW1lb3V0IiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJhZGRPYmplY3QiLCJyZWNvcmQiLCJyZW1vdmVPYmplY3QiLCJMb2Rhc2hBcnJheSIsInB1bGwiLCJ0aW1lRWxhcHNlZCIsIkRhdGUiLCJub3ciLCJpc0VtcHR5Iiwia2V5cyIsIk1hcENhY2hlIiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsInRoaXMiLCJfX2RhdGFfXyIsImFkZCIsImhhcyIsIm5hdGl2ZUNyZWF0ZSIsImdldE5hdGl2ZSIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJlcSIsImlzS2V5YWJsZSIsImZyb21JbmRleCIsImZyb21SaWdodCIsImNhY2hlIiwiaXNLZXkiLCJzdHJpbmdUb1BhdGgiLCJiYXNlU2xpY2UiLCJpc0Ryb3AiLCJiYXNlU29ydGVkSW5kZXhCeSIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwiTUFYX0FSUkFZX0xFTkdUSCIsIm1pZCIsIkFwcEFkYXB0ZXIiLCJwcm9wIiwibmFtZXMiLCJhcGlEb21haW4iLCJtb2RlbE5hbWUiLCJpZCIsImJhc2VVUkwiLCJTdHJpbmciLCJidWlsZFVSTCIsInBhcmFtcyIsInVybCIsInVybEZvckZpbmRBbGwiLCJBeGlvcyIsInJlc3BvbnNlIiwicmVjb3JkSUQiLCJ1cmxGb3JGaW5kUmVjb3JkIiwidXJsRm9yUXVlcnkiLCJ1cmxGb3JRdWVyeVJlY29yZCIsInBsdXJhbFJ1bGVzIiwic2luZ3VsYXJSdWxlcyIsInVuY291bnRhYmxlcyIsImlycmVndWxhclBsdXJhbHMiLCJpcnJlZ3VsYXJTaW5nbGVzIiwic2FuaXRpemVSdWxlIiwicnVsZSIsIlJlZ0V4cCIsInJlc3RvcmVDYXNlIiwid29yZCIsInRva2VuIiwic3Vic3RyIiwiaW50ZXJwb2xhdGUiLCJhcmdzIiwibWF0Y2giLCJzYW5pdGl6ZVdvcmQiLCJydWxlcyIsImxlbiIsInJlcGxhY2VXb3JkIiwicmVwbGFjZU1hcCIsImtlZXBNYXAiLCJjaGVja1dvcmQiLCJib29sIiwicGx1cmFsaXplIiwiY291bnQiLCJpbmNsdXNpdmUiLCJzaW5ndWxhciIsInBsdXJhbCIsImlzUGx1cmFsIiwiaXNTaW5ndWxhciIsImFkZFBsdXJhbFJ1bGUiLCJyZXBsYWNlbWVudCIsImFkZFNpbmd1bGFyUnVsZSIsImFkZFVuY291bnRhYmxlUnVsZSIsImFkZElycmVndWxhclJ1bGUiLCJzaW5nbGUiLCJpc0luZGV4IiwiaXNMZW5ndGgiLCJvZmZzZXQiLCJiYXNlSXNBcmd1bWVudHMiLCJvYmplY3RQcm90byIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaXNBcmd1bWVudHMiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJNYXAiLCJiYXNlSW5kZXhPZiIsImJhc2VGaW5kSW5kZXgiLCJiYXNlSXNOYU4iLCJzdHJpY3RJbmRleE9mIiwic2l6ZSIsImNhc3RQYXRoIiwidG9LZXkiLCJwYXRoIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsIm5hdGl2ZU1pbiIsIk1hdGgiLCJtaW4iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5IiwiaXNBcnJheUxpa2VPYmplY3QiLCJiYXNlSW5kZXhPZldpdGgiLCJjb3B5QXJyYXkiLCJzcGxpY2UiLCJpbmRleE9mIiwibmF0aXZlRmxvb3IiLCJmbG9vciIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJhcnJheUZpbHRlciIsImJhc2VQcm9wZXJ0eSIsImJhc2VUaW1lcyIsIm5hdGl2ZU1heCIsIm1heCIsImdyb3VwIiwiYmFzZURpZmZlcmVuY2UiLCJiYXNlVW5pcSIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSIsInV0aWxzIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJ0b0lTT1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXNobWFya0luZGV4Iiwic2xpY2UiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvY2VzcyIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwiZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImNvbmNhdCIsImRyYWluUXVldWUiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwic2V0dGxlIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiZXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsImZpbHRlciIsIkNhbmNlbCIsIkFwcFNlcmlhbGl6ZXIiLCJzdG9yZSIsImF0dHJzIiwiZ2xvYmFsQXR0cnMiLCJyZWxhdGlvbnNoaXBzIiwiZ2xvYmFsUmVsYXRpb25zaGlwcyIsImF0dHJpYnV0ZXMiLCJzZXJpYWxpemVBdHRycyIsImZvcm1hdHRlZERhdGEiLCJjaGVja0F0dHJzIiwic2VyaWFsaXplUmVsYXRpb25zaGlwcyIsImFzc2lnbiIsInNlcmlhbGl6ZVJlbGF0aW9uc2hpcCIsInJlbGF0aW9uIiwiY2hlY2tSZWxhdGlvbnNoaXBzIiwic2VyaWFsaXplIiwicGFyc2VJbnQiLCJpbmNsdWRlZCIsIm1ldGEiLCJmb3JtYXR0ZWRBcnJheSIsIm5vcm1hbGl6ZUF0dHJpYnV0ZXMiLCJyZWNvcmRzIiwibm9ybWFsaXplUmVsYXRpb25zaGlwcyIsInJlbGF0aW9uRGF0YSIsIm5vcm1hbGl6ZVJlbGF0aW9uc2hpcEFycmF5IiwiaW5jbHVkZSIsImZpbmQiLCJjbGFzc05hbWUiLCJwYXJlbnQiLCJ1cGRhdGVkQXQiLCJjcmVhdGVkQXQiLCJ0YWciLCJnbG9iYWwiLCJzb3VyY2UiLCJmdW5jVG9TdHJpbmciLCJ0cmFuc2Zvcm0iLCJvdGhlckFyZ3MiLCJiYXNlU2V0VG9TdHJpbmciLCJzaG9ydE91dCIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiYXJyYXlTb21lIiwiZXF1YWxGdW5jIiwiaXNQYXJ0aWFsIiwiYXJyTGVuZ3RoIiwic3RhY2tlZCIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsInN0dWJGYWxzZSIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiQnVmZmVyIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsImJhc2VJc1R5cGVkQXJyYXkiLCJub2RlVXRpbCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJTZXQiLCJzcmNWYWx1ZSIsImJhc2VHZXQiLCJkZWZhdWx0VmFsdWUiLCJiYXNlUHVsbEFsbCIsImJhc2VVbnNldCIsImluZGV4ZXMiLCJsYXN0SW5kZXgiLCJwcmV2aW91cyIsInVuemlwIiwiYmFzZUFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJwcm9wcyIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiQXBwTW9kZWwiLCJuZXN0ZWRPYmplY3QiLCJ1cGRhdGVTdG9yZSIsImNyZWF0ZVJlY29yZCIsInBhcnNlRmxvYXQiLCJwZWVrT3JDcmVhdGVSZWNvcmQiLCJQbHVyYWxpemUiLCJwdXNoUmVjb3JkIiwic2VyaWFsaXplckZvciIsInVwZGF0ZSIsImZvcm1hdHRlZFJlc3BvbnNlIiwibm9ybWFsaXplIiwidXBkYXRlUHJvcHMiLCJhZGFwdGVyRm9yIiwidXJsRm9yQ3JlYXRlUmVjb3JkIiwicG9zdCIsInVybEZvclVwZGF0ZVJlY29yZCIsInB1dCIsInVybEZvckRlc3Ryb3lSZWNvcmQiLCJkZWxldGUiLCJyZW1vdmVSZWNvcmQiLCJTdG9yZUNvbnRleHQiLCJ3aXRoU3RvcmUiLCJTdG9yZSIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInN0YXRlIiwibW9kZWxGb3IiLCJwdXNoQWxsIiwicGVla0FsbCIsInBlZWtSZWNvcmQiLCJ1cGRhdGVSZWNvcmQiLCJmaW5kQWxsIiwiZmluZFJlY29yZCIsInF1ZXJ5IiwicXVlcnlSZWNvcmQiLCJhcGlSZXF1ZXN0IiwicmVtb3ZlQWxsIiwiaXNMb2FkZWQiLCJzZXRTdGF0ZSIsInN0b3JlUmVjb3JkIiwibmV3UmVjb3JkIiwibW9kZWxzIiwibG9nZ2VyIiwibW9kZWwiLCJuZXdSZWNvcmRzIiwiYWxsIiwic3RvcmVSZWNvcmRzIiwic2VyaWFsaXplciIsIm5vcm1hbGl6ZUFycmF5IiwiSnNvbkFwaUVycm9ycyIsImZvcm1hdEVycm9ycyIsIlByb3ZpZGVyIiwiQ29tcG9uZW50IiwiV3JhcHBlZENvbXBvbmVudCIsIkNvbnN1bWVyIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiZGVmYXVsdCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzaGlmdCIsImdldFVyaSIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJoIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVhc29uIiwiZm5zIiwibm9ybWFsaXplZE5hbWUiLCJpc0F4aW9zRXJyb3IiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZWQiLCJsaW5lIiwib3JpZ2luVVJMIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwiY2FsbGJhY2siLCJhcnIiLCJpbXBvcnQiLCJBZGFwdGVyIiwiYWxsb3dBYm92ZVJvb3QiLCJ1cCIsImxhc3QiLCJ4cyIsImYiLCJyZXMiLCJyZXNvbHZlZFBhdGgiLCJyZXNvbHZlZEFic29sdXRlIiwiaXNBYnNvbHV0ZSIsInRyYWlsaW5nU2xhc2giLCJyZWxhdGl2ZSIsImZyb20iLCJ0byIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJzYW1lUGFydHNMZW5ndGgiLCJvdXRwdXRQYXJ0cyIsInNlcCIsImRlbGltaXRlciIsImRpcm5hbWUiLCJjaGFyQ29kZUF0IiwiaGFzUm9vdCIsIm1hdGNoZWRTbGFzaCIsImJhc2VuYW1lIiwiZXh0IiwiZXh0bmFtZSIsInN0YXJ0RG90Iiwic3RhcnRQYXJ0IiwicHJlRG90U3RhdGUiLCJzZXJpYWxpemVycyIsIlNlcmlhbGl6ZXIiLCJpc0l0ZXJhdGVlQ2FsbCIsInRvSW50ZWdlciIsIm5hdGl2ZUNlaWwiLCJjZWlsIiwiZ3VhcmQiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidW5tYXNrZWQiLCJ0b051bWJlciIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwidmFsdWVPZiIsImlzQmluYXJ5Iiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsImJhc2VSZXN0IiwiZGlmZmVyZW5jZSIsIkhhc2giLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwiaXNNYXNrZWQiLCJ0b1NvdXJjZSIsInJlSXNIb3N0Q3RvciIsImZ1bmNQcm90byIsInJlSXNOYXRpdmUiLCJ1aWQiLCJjb3JlSnNEYXRhIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsImFzc29jSW5kZXhPZiIsInBvcCIsImdldE1hcERhdGEiLCJjb25zdGFudCIsInN0cmluZyIsIm5hdGl2ZU5vdyIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsImJhc2VJdGVyYXRlZSIsImRpZmZlcmVuY2VCeSIsImJhc2VJc01hdGNoIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImVxdWFsQXJyYXlzIiwiZXF1YWxCeVRhZyIsImVxdWFsT2JqZWN0cyIsImdldFRhZyIsIm9iamVjdFRhZyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiVWludDhBcnJheSIsIm1hcFRvQXJyYXkiLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImNvbnZlcnQiLCJnZXRBbGxLZXlzIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm9iakN0b3IiLCJvdGhDdG9yIiwiYmFzZUdldEFsbEtleXMiLCJnZXRTeW1ib2xzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsInN0dWJBcnJheSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2wiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVQcm9jZXNzIiwidHlwZXMiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJDdG9yIiwib3ZlckFyZyIsImFyZyIsIkRhdGFWaWV3IiwiV2Vha01hcCIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsImN0b3JTdHJpbmciLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsIm1lbW9pemVDYXBwZWQiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwicXVvdGUiLCJzdWJTdHJpbmciLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwiYmFzZVRvU3RyaW5nIiwic3ltYm9sVG9TdHJpbmciLCJiYXNlSGFzSW4iLCJoYXNQYXRoIiwiaGFzRnVuYyIsImJhc2VQcm9wZXJ0eURlZXAiLCJkaWZmZXJlbmNlV2l0aCIsImJhc2VXaGlsZSIsImJhc2VGaWxsIiwidG9MZW5ndGgiLCJiYXNlQ2xhbXAiLCJsb3dlciIsInVwcGVyIiwicGFpciIsImJhc2VJbnRlcnNlY3Rpb24iLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwibmF0aXZlSm9pbiIsInNlcGFyYXRvciIsInN0cmljdExhc3RJbmRleE9mIiwiYmFzZU50aCIsImJhc2VBdCIsImJhc2VQdWxsQXQiLCJjb21wYXJlQXNjZW5kaW5nIiwiZmxhdFJlc3QiLCJwdWxsQXQiLCJzb3J0Iiwic2tpcCIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiZmxhdHRlbiIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiYmFzZVNvcnRlZEluZGV4IiwiYmFzZVNvcnRlZFVuaXEiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ3aXRob3V0IiwiYmFzZVhvciIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsImJhc2VaaXBPYmplY3QiLCJiYXNlU2V0IiwibmVzdGVkIiwibmV3VmFsdWUiLCJ1bnppcFdpdGgiLCJ6aXBXaXRoIiwiTW9kZWwiLCJmb3JtYXR0ZWRFcnJvciIsImVycm9y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RSxLQUFLZ3VCLFFBQVVuc0IsS0FBS3FzQixVQUFVOWhCLEVBQUU1SCxTQUFTaUksT0FBUUwsRUFBRTVILFNBQVNzTSxXQUFZLHFDQUV0STFFLEVBQUUyRCxVQUNYLGFBQVUsa0JBQW1CM0QsRUFBRTJELFNBQy9CZ2UsRUFBaUJsc0IsS0FBS3FzQixVQUFVLElBQUssZ0JBQWlCOWhCLE1BR3RELGFBQVUsY0FBZUEsR0FDekIyaEIsRUFBaUJsc0IsS0FBS3FzQixVQUFVLElBQUssYUFBYzloQixFQUFFK0YsVUFHaEQ0YixJLGdDQUdRdGhCLEVBQVF3QixFQUFPa2dCLEdBQzlCLE1BQU8sQ0FBQyxDQUFFMWhCLE9BQVFBLEVBQVF3QixNQUFPQSxFQUFPa2dCLE9BQVFBLE0sbUNBRzlCSCxHQUNsQixJQUFJSSxFQUFrQixHQU10QixPQUpBSixFQUFPNXpCLFNBQVEsU0FBQWlZLEdBQ2JBLEVBQU04YixPQUFTOWIsRUFBTThiLE9BQU8xeEIsUUFBUSxLQUFNLElBQzFDMnhCLEVBQWdCbHZCLEtBQUttVCxNQUVoQitiLE0sZUFJSTNTIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwMik7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iLCJ2YXIgYmFzZU1hdGNoZXMgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlcycpLFxuICAgIGJhc2VNYXRjaGVzUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIHByb3BlcnR5ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJdGVyYXRlZTtcbiIsInZhciB0b0Zpbml0ZSA9IHJlcXVpcmUoJy4vdG9GaW5pdGUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0ludGVnZXIoMy4yKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDBcbiAqXG4gKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0ludGVnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBlcXVhbCB0byBtZXJnZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJlaW5nIHRoYXQgbm8gcmVmZXJlbmNlXG4gKiB0byBvcmlnaW5hbCBvYmplY3RzIGlzIGtlcHQuXG4gKlxuICogQHNlZSBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGRlZXBNZXJnZTogZGVlcE1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2VPYmplY3Q7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNsaWNlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCIvKipcbiAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsYXN0O1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpLFxuICAgIGFycmF5SW5jbHVkZXNXaXRoID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlc1dpdGgnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyksXG4gICAgY3JlYXRlU2V0ID0gcmVxdWlyZSgnLi9fY3JlYXRlU2V0JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzZWVuID0gcmVzdWx0O1xuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICB9XG4gIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgaWYgKHNldCkge1xuICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICB9XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5pcTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsImV4cG9ydCBjb25zdCBjYW1lbFRvVW5kZXJzY29yZSA9IChrZXkpID0+IHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKCAvKFtBLVpdKS9nLCBcIl8kMVwiKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnQgY29uc3QgY2FtZWxUb0Rhc2ggPSAoa2V5KSA9PiB7XG4gIHJldHVybiBrZXkucmVwbGFjZSggLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicgKS50b0xvd2VyQ2FzZSgpXG59XG5cbmV4cG9ydCBjb25zdCBkYXNoVG9DYW1lbCA9IChrZXkpID0+IHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoZykgeyByZXR1cm4gZ1sxXS50b1VwcGVyQ2FzZSgpIH0pO1xufVxuXG5leHBvcnQgY29uc3QgZGFzaFRvQ2FwaXRhbCA9IChrZXkpID0+IHtcbiAgcmV0dXJuIGtleS5zcGxpdCgnLScpLm1hcChrZXkgPT4ga2V5LnJlcGxhY2Uoa2V5LmNoYXJBdCgwKSwga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpKSkuam9pbignJyk7XG59XG5cbmV4cG9ydCBjb25zdCBwaG9uZVRvU3RyaW5nID0gKGRhdGEpID0+IHtcblx0cmV0dXJuIGRhdGEucmVwbGFjZSgvXFxEKy9nLCAnJyk7XG59IiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheUluY2x1ZGVzJyksXG4gICAgYXJyYXlJbmNsdWRlc1dpdGggPSByZXF1aXJlKCcuL19hcnJheUluY2x1ZGVzV2l0aCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgfVxuICBpZiAoY29tcGFyYXRvcikge1xuICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgfVxuICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VEaWZmZXJlbmNlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7IiwiaW1wb3J0IExvZGFzaEFycmF5IGZyb20gJ2xvZGFzaC9hcnJheSc7XG5cbmV4cG9ydCBjb25zdCB0aW1lb3V0ID0gKG1zKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGFkZE9iamVjdCA9IChhcnJheSwgcmVjb3JkKSA9PiB7XG5cdGxldCBuZXdBcnJheSA9ICFhcnJheS5pbmNsdWRlcyhyZWNvcmQpID8gYXJyYXkucHVzaChyZWNvcmQpIDogYXJyYXk7XG5cdHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlbW92ZU9iamVjdCA9IChhcnJheSwgcmVjb3JkKSA9PiB7XG5cdGxldCBuZXdBcnJheSA9IExvZGFzaEFycmF5LnB1bGwoYXJyYXksIHJlY29yZCk7XG5cdHJldHVybiBuZXdBcnJheTtcbn1cblxuZXhwb3J0IGNvbnN0IHRpbWVFbGFwc2VkID0gKHN0YXJ0KSA9PiB7XG4gIHJldHVybiBEYXRlLm5vdygpIC0gc3RhcnQ7XG59XG5cbmV4cG9ydCBjb25zdCBpc0VtcHR5ID0gKGRhdGEpID0+IHtcblx0aWYgKGRhdGEgPT0gbnVsbCB8fCBkYXRhID09IHVuZGVmaW5lZCB8fCBkYXRhID09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIHRydWVcblx0fVxuXHRpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuXHRcdHJldHVybiBkYXRhLmxlbmd0aCA9PSAwID8gdHJ1ZSA6IGZhbHNlO1xuXHR9XG5cdGlmIChkYXRhLmNvbnN0cnVjdG9yID09IE9iamVjdCkge1xuXHQgcmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpID09IDAgPyB0cnVlIDogZmFsc2U7XG5cdH1cblx0cmV0dXJuIGRhdGEubGVuZ3RoID09IDAgPyB0cnVlIDogZmFsc2U7XG59IiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsInZhciBiYXNlU2xpY2UgPSByZXF1aXJlKCcuL19iYXNlU2xpY2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgcmV0dXJuIGlzRHJvcFxuICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVdoaWxlO1xuIiwidmFyIGJhc2VTb3J0ZWRJbmRleEJ5ID0gcmVxdWlyZSgnLi9fYmFzZVNvcnRlZEluZGV4QnknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbnZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gIHZhciBsb3cgPSAwLFxuICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhpZ2g7XG4gIH1cbiAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTb3J0ZWRJbmRleDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUGx1cmFsaXplIGZyb20gJ3BsdXJhbGl6ZSc7XG5pbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5jbGFzcyBBcHBBZGFwdGVyIHtcblx0c3RhdGljIGFwaURvbWFpbiA9ICcnO1xuXG5cblx0Ly8gTWV0aG9kc1xuXHRzdGF0aWMgZ2V0KHByb3AsIHZhbHVlKSB7XG5cdFx0cmV0dXJuIHRoaXNbcHJvcF07XG5cdH1cblxuXHRzdGF0aWMgc2V0KHByb3AsIHZhbHVlKSB7XG5cdFx0aWYocHJvcC5pbmNsdWRlcygnLicpKSB7XG5cdFx0XHRsZXQgbmFtZXMgPSBwcm9wLnNwbGl0KCcuJyk7XG5cdFx0XHR0aGlzW25hbWVzWzBdXVtuYW1lc1sxXV0gPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpc1twcm9wXSA9IHZhbHVlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHN0YXRpYyBiYXNlVVJMKCkge1xuXHRcdHJldHVybiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/ICcnIDogdGhpcy5hcGlEb21haW47XG5cdH1cblxuXHRcblx0c3RhdGljIGJ1aWxkVVJMKG1vZGVsTmFtZSwgaWQpIHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHJldHVybiB0aGlzLmJhc2VVUkwoKSArIGAvJHtQbHVyYWxpemUobW9kZWxOYW1lKX0vJHtTdHJpbmcoaWQpfWA7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmJhc2VVUkwoKSArIGAvJHtQbHVyYWxpemUobW9kZWxOYW1lKX1gO1xuXHR9XG5cblxuXHRcblx0Ly8gVVJMc1xuXHRzdGF0aWMgdXJsRm9yRmluZEFsbChtb2RlbE5hbWUpIHtcblx0XHRyZXR1cm4gdGhpcy5idWlsZFVSTChtb2RlbE5hbWUpO1xuXHR9XG5cblx0c3RhdGljIHVybEZvckZpbmRSZWNvcmQobW9kZWxOYW1lLCBpZCkge1xuXHRcdHJldHVybiB0aGlzLmJ1aWxkVVJMKG1vZGVsTmFtZSwgaWQpO1xuXHR9XG5cblx0c3RhdGljIHVybEZvclF1ZXJ5KG1vZGVsTmFtZSkge1xuXHRcdHJldHVybiB0aGlzLmJ1aWxkVVJMKG1vZGVsTmFtZSk7XG5cdH1cblxuXHRzdGF0aWMgdXJsRm9yUXVlcnlSZWNvcmQobW9kZWxOYW1lLCBpZCkge1xuXHRcdHJldHVybiB0aGlzLmJ1aWxkVVJMKG1vZGVsTmFtZSwgaWQpO1xuXHR9XG5cblx0c3RhdGljIHVybEZvckNyZWF0ZVJlY29yZChtb2RlbE5hbWUpIHtcblx0XHRyZXR1cm4gdGhpcy5idWlsZFVSTChtb2RlbE5hbWUpO1xuXHR9XG5cblx0c3RhdGljIHVybEZvclVwZGF0ZVJlY29yZChtb2RlbE5hbWUsIGlkKSB7XG5cdFx0cmV0dXJuIHRoaXMuYnVpbGRVUkwobW9kZWxOYW1lLCBpZCk7XG5cdH1cblxuXHRzdGF0aWMgdXJsRm9yRGVzdHJveVJlY29yZChtb2RlbE5hbWUsIGlkKSB7XG5cdFx0cmV0dXJuIHRoaXMuYnVpbGRVUkwobW9kZWxOYW1lLCBpZCk7XG5cdH1cblxuXG5cdC8vIE5ldHdvcmsgY2FsbHNcblx0c3RhdGljIGFzeW5jIGZpbmRBbGwobW9kZWxOYW1lLCBwYXJhbXMpIHtcblx0XHR0cnkge1xuXHRcdFx0bGV0IHVybCA9IHRoaXMudXJsRm9yRmluZEFsbChtb2RlbE5hbWUpO1xuXHRcdFx0bGV0IHJlc3BvbnNlID0gYXdhaXQgQXhpb3MuZ2V0KHVybCwgeyBwYXJhbXMgfSk7XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2UuZGF0YTtcblx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdHRocm93IGU7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGFzeW5jIGZpbmRSZWNvcmQobW9kZWxOYW1lLCByZWNvcmRJRCwgcGFyYW1zID0ge30pIHtcblx0XHR0cnkge1xuXHRcdFx0bGV0IHVybCA9IHRoaXMudXJsRm9yRmluZFJlY29yZChtb2RlbE5hbWUsIHJlY29yZElEKTtcblx0XHRcdGxldCByZXNwb25zZSA9IGF3YWl0IEF4aW9zLmdldCh1cmwsIHsgcGFyYW1zIH0pO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBhc3luYyBxdWVyeShtb2RlbE5hbWUsIHBhcmFtcykge1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgdXJsID0gdGhpcy51cmxGb3JRdWVyeShtb2RlbE5hbWUpO1xuXHRcdFx0bGV0IHJlc3BvbnNlID0gYXdhaXQgQXhpb3MuZ2V0KHVybCwgeyBwYXJhbXMgfSk7XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2UuZGF0YTtcblx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdHRocm93IGU7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGFzeW5jIHF1ZXJ5UmVjb3JkKG1vZGVsTmFtZSwgaWQgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgdXJsID0gdGhpcy51cmxGb3JRdWVyeVJlY29yZChtb2RlbE5hbWUsIGlkKTtcblx0XHRcdGxldCByZXNwb25zZSA9IGF3YWl0IEF4aW9zLmdldCh1cmwsIHsgcGFyYW1zIH0pO1xuXHRcdFx0cmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBBZGFwdGVyOyIsIi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uIChyb290LCBwbHVyYWxpemUpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBwbHVyYWxpemUoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQsIHJlZ2lzdGVycyBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcGx1cmFsaXplKCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWwuXG4gICAgcm9vdC5wbHVyYWxpemUgPSBwbHVyYWxpemUoKTtcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlIHN0b3JhZ2UgLSBwbHVyYWxpemUgYW5kIHNpbmd1bGFyaXplIG5lZWQgdG8gYmUgcnVuIHNlcXVlbnRpYWxseSxcbiAgLy8gd2hpbGUgb3RoZXIgcnVsZXMgY2FuIGJlIG9wdGltaXplZCB1c2luZyBhbiBvYmplY3QgZm9yIGluc3RhbnQgbG9va3Vwcy5cbiAgdmFyIHBsdXJhbFJ1bGVzID0gW107XG4gIHZhciBzaW5ndWxhclJ1bGVzID0gW107XG4gIHZhciB1bmNvdW50YWJsZXMgPSB7fTtcbiAgdmFyIGlycmVndWxhclBsdXJhbHMgPSB7fTtcbiAgdmFyIGlycmVndWxhclNpbmdsZXMgPSB7fTtcblxuICAvKipcbiAgICogU2FuaXRpemUgYSBwbHVyYWxpemF0aW9uIHJ1bGUgdG8gYSB1c2FibGUgcmVndWxhciBleHByZXNzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gIHsoUmVnRXhwfHN0cmluZyl9IHJ1bGVcbiAgICogQHJldHVybiB7UmVnRXhwfVxuICAgKi9cbiAgZnVuY3Rpb24gc2FuaXRpemVSdWxlIChydWxlKSB7XG4gICAgaWYgKHR5cGVvZiBydWxlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcnVsZSArICckJywgJ2knKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXNzIGluIGEgd29yZCB0b2tlbiB0byBwcm9kdWNlIGEgZnVuY3Rpb24gdGhhdCBjYW4gcmVwbGljYXRlIHRoZSBjYXNlIG9uXG4gICAqIGFub3RoZXIgd29yZC5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgIHdvcmRcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgIHRva2VuXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKi9cbiAgZnVuY3Rpb24gcmVzdG9yZUNhc2UgKHdvcmQsIHRva2VuKSB7XG4gICAgLy8gVG9rZW5zIGFyZSBhbiBleGFjdCBtYXRjaC5cbiAgICBpZiAod29yZCA9PT0gdG9rZW4pIHJldHVybiB0b2tlbjtcblxuICAgIC8vIExvd2VyIGNhc2VkIHdvcmRzLiBFLmcuIFwiaGVsbG9cIi5cbiAgICBpZiAod29yZCA9PT0gd29yZC50b0xvd2VyQ2FzZSgpKSByZXR1cm4gdG9rZW4udG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIFVwcGVyIGNhc2VkIHdvcmRzLiBFLmcuIFwiV0hJU0tZXCIuXG4gICAgaWYgKHdvcmQgPT09IHdvcmQudG9VcHBlckNhc2UoKSkgcmV0dXJuIHRva2VuLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAvLyBUaXRsZSBjYXNlZCB3b3Jkcy4gRS5nLiBcIlRpdGxlXCIuXG4gICAgaWYgKHdvcmRbMF0gPT09IHdvcmRbMF0udG9VcHBlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIHRva2VuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdG9rZW4uc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLy8gTG93ZXIgY2FzZWQgd29yZHMuIEUuZy4gXCJ0ZXN0XCIuXG4gICAgcmV0dXJuIHRva2VuLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJwb2xhdGUgYSByZWdleHAgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICAgKiBAcGFyYW0gIHtBcnJheX0gIGFyZ3NcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUgKHN0ciwgYXJncykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFwkKFxcZHsxLDJ9KS9nLCBmdW5jdGlvbiAobWF0Y2gsIGluZGV4KSB7XG4gICAgICByZXR1cm4gYXJnc1tpbmRleF0gfHwgJyc7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZSBhIHdvcmQgdXNpbmcgYSBydWxlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHdvcmRcbiAgICogQHBhcmFtICB7QXJyYXl9ICBydWxlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2UgKHdvcmQsIHJ1bGUpIHtcbiAgICByZXR1cm4gd29yZC5yZXBsYWNlKHJ1bGVbMF0sIGZ1bmN0aW9uIChtYXRjaCwgaW5kZXgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0ZShydWxlWzFdLCBhcmd1bWVudHMpO1xuXG4gICAgICBpZiAobWF0Y2ggPT09ICcnKSB7XG4gICAgICAgIHJldHVybiByZXN0b3JlQ2FzZSh3b3JkW2luZGV4IC0gMV0sIHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN0b3JlQ2FzZShtYXRjaCwgcmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYW5pdGl6ZSBhIHdvcmQgYnkgcGFzc2luZyBpbiB0aGUgd29yZCBhbmQgc2FuaXRpemF0aW9uIHJ1bGVzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgdG9rZW5cbiAgICogQHBhcmFtICB7c3RyaW5nfSAgIHdvcmRcbiAgICogQHBhcmFtICB7QXJyYXl9ICAgIHJ1bGVzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHNhbml0aXplV29yZCAodG9rZW4sIHdvcmQsIHJ1bGVzKSB7XG4gICAgLy8gRW1wdHkgc3RyaW5nIG9yIGRvZXNuJ3QgbmVlZCBmaXhpbmcuXG4gICAgaWYgKCF0b2tlbi5sZW5ndGggfHwgdW5jb3VudGFibGVzLmhhc093blByb3BlcnR5KHRva2VuKSkge1xuICAgICAgcmV0dXJuIHdvcmQ7XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IHJ1bGVzLmxlbmd0aDtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgc2FuaXRpemF0aW9uIHJ1bGVzIGFuZCB1c2UgdGhlIGZpcnN0IG9uZSB0byBtYXRjaC5cbiAgICB3aGlsZSAobGVuLS0pIHtcbiAgICAgIHZhciBydWxlID0gcnVsZXNbbGVuXTtcblxuICAgICAgaWYgKHJ1bGVbMF0udGVzdCh3b3JkKSkgcmV0dXJuIHJlcGxhY2Uod29yZCwgcnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdvcmQ7XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZSBhIHdvcmQgd2l0aCB0aGUgdXBkYXRlZCB3b3JkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgcmVwbGFjZU1hcFxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICAga2VlcE1hcFxuICAgKiBAcGFyYW0gIHtBcnJheX0gICAgcnVsZXNcbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlV29yZCAocmVwbGFjZU1hcCwga2VlcE1hcCwgcnVsZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgIC8vIEdldCB0aGUgY29ycmVjdCB0b2tlbiBhbmQgY2FzZSByZXN0b3JhdGlvbiBmdW5jdGlvbnMuXG4gICAgICB2YXIgdG9rZW4gPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIC8vIENoZWNrIGFnYWluc3QgdGhlIGtlZXAgb2JqZWN0IG1hcC5cbiAgICAgIGlmIChrZWVwTWFwLmhhc093blByb3BlcnR5KHRva2VuKSkge1xuICAgICAgICByZXR1cm4gcmVzdG9yZUNhc2Uod29yZCwgdG9rZW4pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBhZ2FpbnN0IHRoZSByZXBsYWNlbWVudCBtYXAgZm9yIGEgZGlyZWN0IHdvcmQgcmVwbGFjZW1lbnQuXG4gICAgICBpZiAocmVwbGFjZU1hcC5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcbiAgICAgICAgcmV0dXJuIHJlc3RvcmVDYXNlKHdvcmQsIHJlcGxhY2VNYXBbdG9rZW5dKTtcbiAgICAgIH1cblxuICAgICAgLy8gUnVuIGFsbCB0aGUgcnVsZXMgYWdhaW5zdCB0aGUgd29yZC5cbiAgICAgIHJldHVybiBzYW5pdGl6ZVdvcmQodG9rZW4sIHdvcmQsIHJ1bGVzKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgd29yZCBpcyBwYXJ0IG9mIHRoZSBtYXAuXG4gICAqL1xuICBmdW5jdGlvbiBjaGVja1dvcmQgKHJlcGxhY2VNYXAsIGtlZXBNYXAsIHJ1bGVzLCBib29sKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICB2YXIgdG9rZW4gPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmIChrZWVwTWFwLmhhc093blByb3BlcnR5KHRva2VuKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAocmVwbGFjZU1hcC5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIHNhbml0aXplV29yZCh0b2tlbiwgdG9rZW4sIHJ1bGVzKSA9PT0gdG9rZW47XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQbHVyYWxpemUgb3Igc2luZ3VsYXJpemUgYSB3b3JkIGJhc2VkIG9uIHRoZSBwYXNzZWQgaW4gY291bnQuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gIHdvcmQgICAgICBUaGUgd29yZCB0byBwbHVyYWxpemVcbiAgICogQHBhcmFtICB7bnVtYmVyfSAgY291bnQgICAgIEhvdyBtYW55IG9mIHRoZSB3b3JkIGV4aXN0XG4gICAqIEBwYXJhbSAge2Jvb2xlYW59IGluY2x1c2l2ZSBXaGV0aGVyIHRvIHByZWZpeCB3aXRoIHRoZSBudW1iZXIgKGUuZy4gMyBkdWNrcylcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gcGx1cmFsaXplICh3b3JkLCBjb3VudCwgaW5jbHVzaXZlKSB7XG4gICAgdmFyIHBsdXJhbGl6ZWQgPSBjb3VudCA9PT0gMVxuICAgICAgPyBwbHVyYWxpemUuc2luZ3VsYXIod29yZCkgOiBwbHVyYWxpemUucGx1cmFsKHdvcmQpO1xuXG4gICAgcmV0dXJuIChpbmNsdXNpdmUgPyBjb3VudCArICcgJyA6ICcnKSArIHBsdXJhbGl6ZWQ7XG4gIH1cblxuICAvKipcbiAgICogUGx1cmFsaXplIGEgd29yZC5cbiAgICpcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgcGx1cmFsaXplLnBsdXJhbCA9IHJlcGxhY2VXb3JkKFxuICAgIGlycmVndWxhclNpbmdsZXMsIGlycmVndWxhclBsdXJhbHMsIHBsdXJhbFJ1bGVzXG4gICk7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgd29yZCBpcyBwbHVyYWwuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHBsdXJhbGl6ZS5pc1BsdXJhbCA9IGNoZWNrV29yZChcbiAgICBpcnJlZ3VsYXJTaW5nbGVzLCBpcnJlZ3VsYXJQbHVyYWxzLCBwbHVyYWxSdWxlc1xuICApO1xuXG4gIC8qKlxuICAgKiBTaW5ndWxhcml6ZSBhIHdvcmQuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHBsdXJhbGl6ZS5zaW5ndWxhciA9IHJlcGxhY2VXb3JkKFxuICAgIGlycmVndWxhclBsdXJhbHMsIGlycmVndWxhclNpbmdsZXMsIHNpbmd1bGFyUnVsZXNcbiAgKTtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB3b3JkIGlzIHNpbmd1bGFyLlxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqL1xuICBwbHVyYWxpemUuaXNTaW5ndWxhciA9IGNoZWNrV29yZChcbiAgICBpcnJlZ3VsYXJQbHVyYWxzLCBpcnJlZ3VsYXJTaW5nbGVzLCBzaW5ndWxhclJ1bGVzXG4gICk7XG5cbiAgLyoqXG4gICAqIEFkZCBhIHBsdXJhbGl6YXRpb24gcnVsZSB0byB0aGUgY29sbGVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHJ1bGVcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgIHJlcGxhY2VtZW50XG4gICAqL1xuICBwbHVyYWxpemUuYWRkUGx1cmFsUnVsZSA9IGZ1bmN0aW9uIChydWxlLCByZXBsYWNlbWVudCkge1xuICAgIHBsdXJhbFJ1bGVzLnB1c2goW3Nhbml0aXplUnVsZShydWxlKSwgcmVwbGFjZW1lbnRdKTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIGEgc2luZ3VsYXJpemF0aW9uIHJ1bGUgdG8gdGhlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBydWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgICByZXBsYWNlbWVudFxuICAgKi9cbiAgcGx1cmFsaXplLmFkZFNpbmd1bGFyUnVsZSA9IGZ1bmN0aW9uIChydWxlLCByZXBsYWNlbWVudCkge1xuICAgIHNpbmd1bGFyUnVsZXMucHVzaChbc2FuaXRpemVSdWxlKHJ1bGUpLCByZXBsYWNlbWVudF0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYW4gdW5jb3VudGFibGUgd29yZCBydWxlLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gd29yZFxuICAgKi9cbiAgcGx1cmFsaXplLmFkZFVuY291bnRhYmxlUnVsZSA9IGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgaWYgKHR5cGVvZiB3b3JkID09PSAnc3RyaW5nJykge1xuICAgICAgdW5jb3VudGFibGVzW3dvcmQudG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNldCBzaW5ndWxhciBhbmQgcGx1cmFsIHJlZmVyZW5jZXMgZm9yIHRoZSB3b3JkLlxuICAgIHBsdXJhbGl6ZS5hZGRQbHVyYWxSdWxlKHdvcmQsICckMCcpO1xuICAgIHBsdXJhbGl6ZS5hZGRTaW5ndWxhclJ1bGUod29yZCwgJyQwJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBpcnJlZ3VsYXIgd29yZCBkZWZpbml0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2luZ2xlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwbHVyYWxcbiAgICovXG4gIHBsdXJhbGl6ZS5hZGRJcnJlZ3VsYXJSdWxlID0gZnVuY3Rpb24gKHNpbmdsZSwgcGx1cmFsKSB7XG4gICAgcGx1cmFsID0gcGx1cmFsLnRvTG93ZXJDYXNlKCk7XG4gICAgc2luZ2xlID0gc2luZ2xlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpcnJlZ3VsYXJTaW5nbGVzW3NpbmdsZV0gPSBwbHVyYWw7XG4gICAgaXJyZWd1bGFyUGx1cmFsc1twbHVyYWxdID0gc2luZ2xlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJcnJlZ3VsYXIgcnVsZXMuXG4gICAqL1xuICBbXG4gICAgLy8gUHJvbm91bnMuXG4gICAgWydJJywgJ3dlJ10sXG4gICAgWydtZScsICd1cyddLFxuICAgIFsnaGUnLCAndGhleSddLFxuICAgIFsnc2hlJywgJ3RoZXknXSxcbiAgICBbJ3RoZW0nLCAndGhlbSddLFxuICAgIFsnbXlzZWxmJywgJ291cnNlbHZlcyddLFxuICAgIFsneW91cnNlbGYnLCAneW91cnNlbHZlcyddLFxuICAgIFsnaXRzZWxmJywgJ3RoZW1zZWx2ZXMnXSxcbiAgICBbJ2hlcnNlbGYnLCAndGhlbXNlbHZlcyddLFxuICAgIFsnaGltc2VsZicsICd0aGVtc2VsdmVzJ10sXG4gICAgWyd0aGVtc2VsZicsICd0aGVtc2VsdmVzJ10sXG4gICAgWydpcycsICdhcmUnXSxcbiAgICBbJ3dhcycsICd3ZXJlJ10sXG4gICAgWydoYXMnLCAnaGF2ZSddLFxuICAgIFsndGhpcycsICd0aGVzZSddLFxuICAgIFsndGhhdCcsICd0aG9zZSddLFxuICAgIC8vIFdvcmRzIGVuZGluZyBpbiB3aXRoIGEgY29uc29uYW50IGFuZCBgb2AuXG4gICAgWydlY2hvJywgJ2VjaG9lcyddLFxuICAgIFsnZGluZ28nLCAnZGluZ29lcyddLFxuICAgIFsndm9sY2FubycsICd2b2xjYW5vZXMnXSxcbiAgICBbJ3Rvcm5hZG8nLCAndG9ybmFkb2VzJ10sXG4gICAgWyd0b3JwZWRvJywgJ3RvcnBlZG9lcyddLFxuICAgIC8vIEVuZHMgd2l0aCBgdXNgLlxuICAgIFsnZ2VudXMnLCAnZ2VuZXJhJ10sXG4gICAgWyd2aXNjdXMnLCAndmlzY2VyYSddLFxuICAgIC8vIEVuZHMgd2l0aCBgbWFgLlxuICAgIFsnc3RpZ21hJywgJ3N0aWdtYXRhJ10sXG4gICAgWydzdG9tYScsICdzdG9tYXRhJ10sXG4gICAgWydkb2dtYScsICdkb2dtYXRhJ10sXG4gICAgWydsZW1tYScsICdsZW1tYXRhJ10sXG4gICAgWydzY2hlbWEnLCAnc2NoZW1hdGEnXSxcbiAgICBbJ2FuYXRoZW1hJywgJ2FuYXRoZW1hdGEnXSxcbiAgICAvLyBPdGhlciBpcnJlZ3VsYXIgcnVsZXMuXG4gICAgWydveCcsICdveGVuJ10sXG4gICAgWydheGUnLCAnYXhlcyddLFxuICAgIFsnZGllJywgJ2RpY2UnXSxcbiAgICBbJ3llcycsICd5ZXNlcyddLFxuICAgIFsnZm9vdCcsICdmZWV0J10sXG4gICAgWydlYXZlJywgJ2VhdmVzJ10sXG4gICAgWydnb29zZScsICdnZWVzZSddLFxuICAgIFsndG9vdGgnLCAndGVldGgnXSxcbiAgICBbJ3F1aXonLCAncXVpenplcyddLFxuICAgIFsnaHVtYW4nLCAnaHVtYW5zJ10sXG4gICAgWydwcm9vZicsICdwcm9vZnMnXSxcbiAgICBbJ2NhcnZlJywgJ2NhcnZlcyddLFxuICAgIFsndmFsdmUnLCAndmFsdmVzJ10sXG4gICAgWydsb29leScsICdsb29pZXMnXSxcbiAgICBbJ3RoaWVmJywgJ3RoaWV2ZXMnXSxcbiAgICBbJ2dyb292ZScsICdncm9vdmVzJ10sXG4gICAgWydwaWNrYXhlJywgJ3BpY2theGVzJ10sXG4gICAgWydwYXNzZXJieScsICdwYXNzZXJzYnknXVxuICBdLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICByZXR1cm4gcGx1cmFsaXplLmFkZElycmVndWxhclJ1bGUocnVsZVswXSwgcnVsZVsxXSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBQbHVyYWxpemF0aW9uIHJ1bGVzLlxuICAgKi9cbiAgW1xuICAgIFsvcz8kL2ksICdzJ10sXG4gICAgWy9bXlxcdTAwMDAtXFx1MDA3Rl0kL2ksICckMCddLFxuICAgIFsvKFteYWVpb3VdZXNlKSQvaSwgJyQxJ10sXG4gICAgWy8oYXh8dGVzdClpcyQvaSwgJyQxZXMnXSxcbiAgICBbLyhhbGlhc3xbXmFvdV11c3x0W2xtXWFzfGdhc3xyaXMpJC9pLCAnJDFlcyddLFxuICAgIFsvKGVbbW5ddSlzPyQvaSwgJyQxcyddLFxuICAgIFsvKFtebF1pYXN8W2FlaW91XWxhc3xbZWp6cl1hc3xbaXVdYW0pJC9pLCAnJDEnXSxcbiAgICBbLyhhbHVtbnxzeWxsYWJ8dmlyfHJhZGl8bnVjbGV8ZnVuZ3xjYWN0fHN0aW11bHx0ZXJtaW58YmFjaWxsfGZvY3x1dGVyfGxvY3xzdHJhdCkoPzp1c3xpKSQvaSwgJyQxaSddLFxuICAgIFsvKGFsdW1ufGFsZ3x2ZXJ0ZWJyKSg/OmF8YWUpJC9pLCAnJDFhZSddLFxuICAgIFsvKHNlcmFwaHxjaGVydWIpKD86aW0pPyQvaSwgJyQxaW0nXSxcbiAgICBbLyhoZXJ8YXR8Z3IpbyQvaSwgJyQxb2VzJ10sXG4gICAgWy8oYWdlbmR8YWRkZW5kfG1pbGxlbm5pfGRhdHxleHRyZW18YmFjdGVyaXxkZXNpZGVyYXR8c3RyYXR8Y2FuZGVsYWJyfGVycmF0fG92fHN5bXBvc2l8Y3VycmljdWx8YXV0b21hdHxxdW9yKSg/OmF8dW0pJC9pLCAnJDFhJ10sXG4gICAgWy8oYXBoZWxpfGh5cGVyYmF0fHBlcmloZWxpfGFzeW5kZXR8bm91bWVufHBoZW5vbWVufGNyaXRlcml8b3JnYW58cHJvbGVnb21lbnxoZWRyfGF1dG9tYXQpKD86YXxvbikkL2ksICckMWEnXSxcbiAgICBbL3NpcyQvaSwgJ3NlcyddLFxuICAgIFsvKD86KGtuaXx3aXxsaSlmZXwoYXJ8bHxlYXxlb3xvYXxob28pZikkL2ksICckMSQydmVzJ10sXG4gICAgWy8oW15hZWlvdXldfHF1KXkkL2ksICckMWllcyddLFxuICAgIFsvKFteY2hdW2llb11bbG5dKWV5JC9pLCAnJDFpZXMnXSxcbiAgICBbLyh4fGNofHNzfHNofHp6KSQvaSwgJyQxZXMnXSxcbiAgICBbLyhtYXRyfGNvZHxtdXJ8c2lsfHZlcnR8aW5kfGFwcGVuZCkoPzppeHxleCkkL2ksICckMWljZXMnXSxcbiAgICBbL1xcYigoPzp0aXQpP218bCkoPzppY2V8b3VzZSkkL2ksICckMWljZSddLFxuICAgIFsvKHBlKSg/OnJzb258b3BsZSkkL2ksICckMW9wbGUnXSxcbiAgICBbLyhjaGlsZCkoPzpyZW4pPyQvaSwgJyQxcmVuJ10sXG4gICAgWy9lYXV4JC9pLCAnJDAnXSxcbiAgICBbL21bYWVdbiQvaSwgJ21lbiddLFxuICAgIFsndGhvdScsICd5b3UnXVxuICBdLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICByZXR1cm4gcGx1cmFsaXplLmFkZFBsdXJhbFJ1bGUocnVsZVswXSwgcnVsZVsxXSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBTaW5ndWxhcml6YXRpb24gcnVsZXMuXG4gICAqL1xuICBbXG4gICAgWy9zJC9pLCAnJ10sXG4gICAgWy8oc3MpJC9pLCAnJDEnXSxcbiAgICBbLyh3aXxrbml8KD86YWZ0ZXJ8aGFsZnxoaWdofGxvd3xtaWR8bm9ufG5pZ2h0fFteXFx3XXxeKWxpKXZlcyQvaSwgJyQxZmUnXSxcbiAgICBbLyhhcnwoPzp3b3xbYWVdKWx8W2VvXVthb10pdmVzJC9pLCAnJDFmJ10sXG4gICAgWy9pZXMkL2ksICd5J10sXG4gICAgWy9cXGIoW3BsXXx6b21ifCg/Om5lY2t8Y3Jvc3MpP3R8Y29sbHxmYWVyfGZvb2R8Z2VufGdvb258Z3JvdXB8bGFzc3x0YWxrfGdvYWx8Y3V0KWllcyQvaSwgJyQxaWUnXSxcbiAgICBbL1xcYihtb258c21pbClpZXMkL2ksICckMWV5J10sXG4gICAgWy9cXGIoKD86dGl0KT9tfGwpaWNlJC9pLCAnJDFvdXNlJ10sXG4gICAgWy8oc2VyYXBofGNoZXJ1YilpbSQvaSwgJyQxJ10sXG4gICAgWy8oeHxjaHxzc3xzaHx6enx0dG98Z298Y2hvfGFsaWFzfFteYW91XXVzfHRbbG1dYXN8Z2FzfCg/OmhlcnxhdHxncilvfFthZWlvdV1yaXMpKD86ZXMpPyQvaSwgJyQxJ10sXG4gICAgWy8oYW5hbHl8ZGlhZ25vfHBhcmVudGhlfHByb2dub3xzeW5vcHx0aGV8ZW1waGF8Y3JpfG5lKSg/OnNpc3xzZXMpJC9pLCAnJDFzaXMnXSxcbiAgICBbLyhtb3ZpZXx0d2VsdmV8YWJ1c2V8ZVttbl11KXMkL2ksICckMSddLFxuICAgIFsvKHRlc3QpKD86aXN8ZXMpJC9pLCAnJDFpcyddLFxuICAgIFsvKGFsdW1ufHN5bGxhYnx2aXJ8cmFkaXxudWNsZXxmdW5nfGNhY3R8c3RpbXVsfHRlcm1pbnxiYWNpbGx8Zm9jfHV0ZXJ8bG9jfHN0cmF0KSg/OnVzfGkpJC9pLCAnJDF1cyddLFxuICAgIFsvKGFnZW5kfGFkZGVuZHxtaWxsZW5uaXxkYXR8ZXh0cmVtfGJhY3Rlcml8ZGVzaWRlcmF0fHN0cmF0fGNhbmRlbGFicnxlcnJhdHxvdnxzeW1wb3NpfGN1cnJpY3VsfHF1b3IpYSQvaSwgJyQxdW0nXSxcbiAgICBbLyhhcGhlbGl8aHlwZXJiYXR8cGVyaWhlbGl8YXN5bmRldHxub3VtZW58cGhlbm9tZW58Y3JpdGVyaXxvcmdhbnxwcm9sZWdvbWVufGhlZHJ8YXV0b21hdClhJC9pLCAnJDFvbiddLFxuICAgIFsvKGFsdW1ufGFsZ3x2ZXJ0ZWJyKWFlJC9pLCAnJDFhJ10sXG4gICAgWy8oY29kfG11cnxzaWx8dmVydHxpbmQpaWNlcyQvaSwgJyQxZXgnXSxcbiAgICBbLyhtYXRyfGFwcGVuZClpY2VzJC9pLCAnJDFpeCddLFxuICAgIFsvKHBlKShyc29ufG9wbGUpJC9pLCAnJDFyc29uJ10sXG4gICAgWy8oY2hpbGQpcmVuJC9pLCAnJDEnXSxcbiAgICBbLyhlYXUpeD8kL2ksICckMSddLFxuICAgIFsvbWVuJC9pLCAnbWFuJ11cbiAgXS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcmV0dXJuIHBsdXJhbGl6ZS5hZGRTaW5ndWxhclJ1bGUocnVsZVswXSwgcnVsZVsxXSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBVbmNvdW50YWJsZSBydWxlcy5cbiAgICovXG4gIFtcbiAgICAvLyBTaW5ndWxhciB3b3JkcyB3aXRoIG5vIHBsdXJhbHMuXG4gICAgJ2FkdWx0aG9vZCcsXG4gICAgJ2FkdmljZScsXG4gICAgJ2FnZW5kYScsXG4gICAgJ2FpZCcsXG4gICAgJ2FpcmNyYWZ0JyxcbiAgICAnYWxjb2hvbCcsXG4gICAgJ2FtbW8nLFxuICAgICdhbmFseXRpY3MnLFxuICAgICdhbmltZScsXG4gICAgJ2F0aGxldGljcycsXG4gICAgJ2F1ZGlvJyxcbiAgICAnYmlzb24nLFxuICAgICdibG9vZCcsXG4gICAgJ2JyZWFtJyxcbiAgICAnYnVmZmFsbycsXG4gICAgJ2J1dHRlcicsXG4gICAgJ2NhcnAnLFxuICAgICdjYXNoJyxcbiAgICAnY2hhc3NpcycsXG4gICAgJ2NoZXNzJyxcbiAgICAnY2xvdGhpbmcnLFxuICAgICdjb2QnLFxuICAgICdjb21tZXJjZScsXG4gICAgJ2Nvb3BlcmF0aW9uJyxcbiAgICAnY29ycHMnLFxuICAgICdkZWJyaXMnLFxuICAgICdkaWFiZXRlcycsXG4gICAgJ2RpZ2VzdGlvbicsXG4gICAgJ2VsaycsXG4gICAgJ2VuZXJneScsXG4gICAgJ2VxdWlwbWVudCcsXG4gICAgJ2V4Y3JldGlvbicsXG4gICAgJ2V4cGVydGlzZScsXG4gICAgJ2Zpcm13YXJlJyxcbiAgICAnZmxvdW5kZXInLFxuICAgICdmdW4nLFxuICAgICdnYWxsb3dzJyxcbiAgICAnZ2FyYmFnZScsXG4gICAgJ2dyYWZmaXRpJyxcbiAgICAnaGFyZHdhcmUnLFxuICAgICdoZWFkcXVhcnRlcnMnLFxuICAgICdoZWFsdGgnLFxuICAgICdoZXJwZXMnLFxuICAgICdoaWdoamlua3MnLFxuICAgICdob21ld29yaycsXG4gICAgJ2hvdXNld29yaycsXG4gICAgJ2luZm9ybWF0aW9uJyxcbiAgICAnamVhbnMnLFxuICAgICdqdXN0aWNlJyxcbiAgICAna3Vkb3MnLFxuICAgICdsYWJvdXInLFxuICAgICdsaXRlcmF0dXJlJyxcbiAgICAnbWFjaGluZXJ5JyxcbiAgICAnbWFja2VyZWwnLFxuICAgICdtYWlsJyxcbiAgICAnbWVkaWEnLFxuICAgICdtZXdzJyxcbiAgICAnbW9vc2UnLFxuICAgICdtdXNpYycsXG4gICAgJ211ZCcsXG4gICAgJ21hbmdhJyxcbiAgICAnbmV3cycsXG4gICAgJ29ubHknLFxuICAgICdwZXJzb25uZWwnLFxuICAgICdwaWtlJyxcbiAgICAncGxhbmt0b24nLFxuICAgICdwbGllcnMnLFxuICAgICdwb2xpY2UnLFxuICAgICdwb2xsdXRpb24nLFxuICAgICdwcmVtaXNlcycsXG4gICAgJ3JhaW4nLFxuICAgICdyZXNlYXJjaCcsXG4gICAgJ3JpY2UnLFxuICAgICdzYWxtb24nLFxuICAgICdzY2lzc29ycycsXG4gICAgJ3NlcmllcycsXG4gICAgJ3Nld2FnZScsXG4gICAgJ3NoYW1ibGVzJyxcbiAgICAnc2hyaW1wJyxcbiAgICAnc29mdHdhcmUnLFxuICAgICdzcGVjaWVzJyxcbiAgICAnc3RhZmYnLFxuICAgICdzd2luZScsXG4gICAgJ3Rlbm5pcycsXG4gICAgJ3RyYWZmaWMnLFxuICAgICd0cmFuc3BvcnRhdGlvbicsXG4gICAgJ3Ryb3V0JyxcbiAgICAndHVuYScsXG4gICAgJ3dlYWx0aCcsXG4gICAgJ3dlbGZhcmUnLFxuICAgICd3aGl0aW5nJyxcbiAgICAnd2lsZGViZWVzdCcsXG4gICAgJ3dpbGRsaWZlJyxcbiAgICAneW91JyxcbiAgICAvcG9rW2XDqV1tb24kL2ksXG4gICAgLy8gUmVnZXhlcy5cbiAgICAvW15hZWlvdV1lc2UkL2ksIC8vIFwiY2hpbmVzZVwiLCBcImphcGFuZXNlXCJcbiAgICAvZGVlciQvaSwgLy8gXCJkZWVyXCIsIFwicmVpbmRlZXJcIlxuICAgIC9maXNoJC9pLCAvLyBcImZpc2hcIiwgXCJibG93ZmlzaFwiLCBcImFuZ2VsZmlzaFwiXG4gICAgL21lYXNsZXMkL2ksXG4gICAgL29baXVdcyQvaSwgLy8gXCJjYXJuaXZvcm91c1wiXG4gICAgL3BveCQvaSwgLy8gXCJjaGlja3BveFwiLCBcInNtYWxscG94XCJcbiAgICAvc2hlZXAkL2lcbiAgXS5mb3JFYWNoKHBsdXJhbGl6ZS5hZGRVbmNvdW50YWJsZVJ1bGUpO1xuXG4gIHJldHVybiBwbHVyYWxpemU7XG59KTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJdGVyYXRlZUNhbGw7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlJbmNsdWRlcztcbiIsInZhciBiYXNlRmluZEluZGV4ID0gcmVxdWlyZSgnLi9fYmFzZUZpbmRJbmRleCcpLFxuICAgIGJhc2VJc05hTiA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hTicpLFxuICAgIHN0cmljdEluZGV4T2YgPSByZXF1aXJlKCcuL19zdHJpY3RJbmRleE9mJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUluZGV4T2Y7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXMnKSxcbiAgICBhcnJheUluY2x1ZGVzV2l0aCA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXNXaXRoJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICB9XG4gICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuICBhcnJheSA9IGFycmF5c1swXTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgIGlmICghKHNlZW5cbiAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgKSkge1xuICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW50ZXJzZWN0aW9uO1xuIiwidmFyIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RBcnJheUxpa2VPYmplY3Q7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJbmRleE9mID0gcmVxdWlyZSgnLi9fYmFzZUluZGV4T2YnKSxcbiAgICBiYXNlSW5kZXhPZldpdGggPSByZXF1aXJlKCcuL19iYXNlSW5kZXhPZldpdGgnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgc2VlbiA9IGFycmF5O1xuXG4gIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gIH1cbiAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICB9XG4gICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQdWxsQWxsO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xudmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gIHZhciBsb3cgPSAwLFxuICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoc2V0TG93KSB7XG4gICAgICBsb3cgPSBtaWQgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWdoID0gbWlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNvcnRlZEluZGV4Qnk7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKSxcbiAgICBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAqIGNvbmZpZ3VyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjIuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICpcbiAqIF8udW56aXAoemlwcGVkKTtcbiAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gKi9cbmZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIGxlbmd0aCA9IDA7XG4gIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVuemlwO1xuIiwidmFyIGJhc2VEaWZmZXJlbmNlID0gcmVxdWlyZSgnLi9fYmFzZURpZmZlcmVuY2UnKSxcbiAgICBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgYmFzZVVuaXEgPSByZXF1aXJlKCcuL19iYXNlVW5pcScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVhvcjtcbiIsImNvbnN0IERldkxvZ2dlciA9ICguLi5kYXRhKSA9PiB7XG5cdGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PSAnZGV2ZWxvcG1lbnQnKSB7XG5cdFx0cmV0dXJuIGNvbnNvbGUubG9nKC4uLmRhdGEpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERldkxvZ2dlcjsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBsdXJhbGl6ZSBmcm9tICdwbHVyYWxpemUnO1xuXG5pbXBvcnQgeyBjYW1lbFRvRGFzaCwgZGFzaFRvQ2FtZWwsIHBob25lVG9TdHJpbmcgfSBmcm9tICdzdG9yZS91dGlscy90cmFuc2Zvcm1zJztcbmltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICdzdG9yZS91dGlscy9oZWxwZXJzJztcblxuY2xhc3MgQXBwU2VyaWFsaXplciB7XG5cdGNvbnN0cnVjdG9yKHN0b3JlLCBwcm9wcyA9IHt9KSB7XG5cdFx0dGhpcy5zdG9yZSA9IHN0b3JlIHx8IHt9O1xuXHR9XG5cblx0Z2V0IGF0dHJzKCkge1xuXHRcdHJldHVybiB7fVxuXHR9XG5cblx0Z2V0IGdsb2JhbEF0dHJzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjbGFzc05hbWU6IGZhbHNlLFxuXHRcdFx0dHlwZTogZmFsc2UsXG5cdFx0XHRwYXJlbnQ6IGZhbHNlLFxuXHRcdFx0c3RvcmU6IGZhbHNlLFxuXHRcdFx0bG9nOiBmYWxzZSxcblx0XHRcdHVwZGF0ZWRBdDogZmFsc2UsXG5cdFx0XHRjcmVhdGVkQXQ6IGZhbHNlLFxuXHRcdH1cblx0fVxuXG5cdGdldCByZWxhdGlvbnNoaXBzKCkge1xuXHRcdHJldHVybiB7fVxuXHR9XG5cblx0Z2V0IGdsb2JhbFJlbGF0aW9uc2hpcHMoKSB7XG5cdFx0cmV0dXJuIHt9XG5cdH1cblxuXG5cdC8vIE1ldGhvZHNcblx0Y2hlY2tBdHRycyhrZXkpIHtcblx0XHRsZXQgYXR0cnMgPSB7Li4udGhpcy5hdHRycywgLi4udGhpcy5nbG9iYWxBdHRycyB9O1xuXHRcdGxldCBrZXlzID0gT2JqZWN0LmtleXMoYXR0cnMpO1xuXHRcdHJldHVybiBrZXlzLmluY2x1ZGVzKGtleSkgPyBhdHRyc1trZXldIDogdHJ1ZTtcblx0fVxuXG5cdGNoZWNrUmVsYXRpb25zaGlwcyhrZXkpIHtcblx0XHRsZXQgcmVsYXRpb25zaGlwcyA9IHsuLi50aGlzLnJlbGF0aW9uc2hpcHMsIC4uLnRoaXMuZ2xvYmFsUmVsYXRpb25zaGlwcyB9O1xuXHRcdGxldCBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpb25zaGlwcyk7XG5cdFx0cmV0dXJuIGtleXMuaW5jbHVkZXMoa2V5KSA/IHJlbGF0aW9uc2hpcHNba2V5XSA6IHRydWU7XG5cdH1cblxuXG5cdC8vIFNlcmlhbGl6ZVxuXHRzZXJpYWxpemUoZGF0YSkge1xuXHRcdGxldCBmb3JtYXR0ZWREYXRhID0ge307XG5cdFx0Zm9ybWF0dGVkRGF0YSA9IHRoaXMuc2VyaWFsaXplQXR0cnMoZGF0YSk7XG5cdFx0cmV0dXJuIHsgZGF0YTogeyBhdHRyaWJ1dGVzOiBmb3JtYXR0ZWREYXRhIH19O1xuXHR9XG5cblx0c2VyaWFsaXplQXR0cnMoZGF0YSkge1xuXHRcdGxldCBmb3JtYXR0ZWREYXRhID0ge307XG5cdFx0T2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0aWYoaXNFbXB0eShkYXRhW2tleV0pKSB7IFxuXHRcdFx0XHRyZXR1cm47IFxuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5jaGVja0F0dHJzKGtleSkgPT0gZmFsc2UpIHsgXG5cdFx0XHRcdHJldHVybjsgXG5cdFx0XHR9XG5cdFx0XHQvLyBUcmFuc2Zvcm1zXG5cdFx0XHRpZihBcnJheS5pc0FycmF5KGRhdGFba2V5XSkgJiYgICFpc0VtcHR5KGRhdGFba2V5XSkpICB7XG5cdFx0XHRcdGlmKHR5cGVvZiBkYXRhW2tleV1bMF0gPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRmb3JtYXR0ZWREYXRhW2tleV0gPSB0aGlzLnNlcmlhbGl6ZVJlbGF0aW9uc2hpcHMoZGF0YSwga2V5KTtcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0fVxuXHRcdFx0XHRmb3JtYXR0ZWREYXRhW2NhbWVsVG9EYXNoKGtleSldID0gSlNPTi5zdHJpbmdpZnkoZGF0YVtrZXldKTtcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cdFx0XHRpZih0eXBlb2YgZGF0YVtrZXldID09ICdvYmplY3QnICYmICFpc0VtcHR5KGRhdGFba2V5XSkpIHtcblx0XHRcdFx0T2JqZWN0LmFzc2lnbihmb3JtYXR0ZWREYXRhLCB0aGlzLnNlcmlhbGl6ZVJlbGF0aW9uc2hpcChkYXRhLCBrZXkpKTtcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cdFx0XHRmb3JtYXR0ZWREYXRhW2NhbWVsVG9EYXNoKGtleSldID0gZGF0YVtrZXldO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH0pO1xuXHRcdHJldHVybiBmb3JtYXR0ZWREYXRhO1xuXHR9XG5cblx0c2VyaWFsaXplUmVsYXRpb25zaGlwcyhkYXRhLCBrZXkpIHtcblx0XHRsZXQgZm9ybWF0dGVkRGF0YSA9IFtdO1xuXHRcdGRhdGFba2V5XS5mb3JFYWNoKHJlbGF0aW9uID0+IHtcblx0XHRcdGlmICh0aGlzLmNoZWNrUmVsYXRpb25zaGlwcyhrZXkpLnNlcmlhbGl6ZSA9PSB0cnVlKSB7XG5cdFx0XHRcdGZvcm1hdHRlZERhdGEucHVzaCh0aGlzLnNlcmlhbGl6ZUF0dHJzKHJlbGF0aW9uKSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5jaGVja1JlbGF0aW9uc2hpcHMoa2V5KS5zZXJpYWxpemUgPT0gJ2lkJykge1xuXHRcdFx0XHRmb3JtYXR0ZWREYXRhLnB1c2goeyBpZDogcGFyc2VJbnQocmVsYXRpb24uaWQpIH0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFyZWxhdGlvbi50eXBlKSB7XG5cdFx0XHRcdGZvcm1hdHRlZERhdGEucHVzaCh0aGlzLnNlcmlhbGl6ZUF0dHJzKHJlbGF0aW9uKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGZvcm1hdHRlZERhdGE7XG5cdH1cblxuXHRzZXJpYWxpemVSZWxhdGlvbnNoaXAoZGF0YSwga2V5KSB7XG5cdFx0bGV0IGZvcm1hdHRlZERhdGEgPSB7fTtcblx0XHRpZiAodGhpcy5jaGVja1JlbGF0aW9uc2hpcHMoa2V5KS5zZXJpYWxpemUgPT0gdHJ1ZSkge1xuXHRcdFx0Zm9ybWF0dGVkRGF0YVtjYW1lbFRvRGFzaChrZXkpXSA9IHRoaXMuc2VyaWFsaXplQXR0cnMoZGF0YVtrZXldKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY2hlY2tSZWxhdGlvbnNoaXBzKGtleSkuc2VyaWFsaXplID09ICdpZCcpIHtcblx0XHRcdGZvcm1hdHRlZERhdGFbY2FtZWxUb0Rhc2goa2V5KV0gPSB7IGlkOiBwYXJzZUludChkYXRhW2tleV0uaWQpIH07XG5cdFx0fVxuXHRcdGlmICghZGF0YVtrZXldLnR5cGUpIHtcblx0XHRcdGZvcm1hdHRlZERhdGFbY2FtZWxUb0Rhc2goa2V5KV0gPSB0aGlzLnNlcmlhbGl6ZUF0dHJzKGRhdGFba2V5XSk7XG5cdFx0fVxuXHRcdHJldHVybiBmb3JtYXR0ZWREYXRhO1xuXHR9XG5cblx0XG5cdC8vIE5vcm1hbGl6ZVxuXHRub3JtYWxpemVBcnJheShkYXRhLCBpbmNsdWRlZCA9IFtdLCBtZXRhID0ge30pIHtcblx0XHRsZXQgZm9ybWF0dGVkQXJyYXkgPSBbXTtcblx0XHRpZiAoaXNFbXB0eShkYXRhKSkgeyByZXR1cm4gIHsgcmVjb3JkczogZm9ybWF0dGVkQXJyYXksIG1ldGE6IHRoaXMubm9ybWFsaXplQXR0cmlidXRlcyhtZXRhKSB9IH07XG5cblx0XHRkYXRhLm1hcChyZWNvcmQgPT4ge1xuXHRcdFx0bGV0IGZvcm1hdHRlZERhdGEgPSB7fTtcblx0XHRcdGxldCBrZXlzID0gdGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVzKHJlY29yZCwgaW5jbHVkZWQpO1xuXHRcdFx0XG5cdFx0XHRPYmplY3Qua2V5cyhrZXlzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRcdGZvcm1hdHRlZERhdGFbZGFzaFRvQ2FtZWwoa2V5KV0gPSBrZXlzW2tleV1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGZvcm1hdHRlZEFycmF5LnB1c2goZm9ybWF0dGVkRGF0YSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHsgcmVjb3JkczogZm9ybWF0dGVkQXJyYXksIG1ldGE6IHRoaXMubm9ybWFsaXplQXR0cmlidXRlcyhtZXRhKSB9O1xuXHR9XG5cblx0bm9ybWFsaXplKGRhdGEsIGluY2x1ZGVkID0gW10pIHtcblx0XHRsZXQgZm9ybWF0dGVkRGF0YSA9IHt9O1xuXHRcdGlmIChpc0VtcHR5KGRhdGEpKSB7IHJldHVybiBmb3JtYXR0ZWREYXRhIH1cblxuXHRcdGxldCBrZXlzID0gdGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVzKGRhdGEsIGluY2x1ZGVkKTtcblxuXHRcdE9iamVjdC5rZXlzKGtleXMpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdGZvcm1hdHRlZERhdGFbZGFzaFRvQ2FtZWwoa2V5KV0gPSBrZXlzW2tleV1cblx0XHR9KTtcblxuXHRcdHJldHVybiBmb3JtYXR0ZWREYXRhO1xuXHR9XG5cblx0bm9ybWFsaXplQXR0cmlidXRlcyhkYXRhLCBpbmNsdWRlZCkge1xuXHRcdGxldCBmb3JtYXR0ZWREYXRhID0ge307XG5cdFx0T2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0aWYoaXNFbXB0eShkYXRhW2tleV0pKSB7IHJldHVybiB9XG5cdFx0XHRcblx0XHRcdGlmKGtleSA9PSdpZCcpIHtcblx0XHRcdFx0Zm9ybWF0dGVkRGF0YVtrZXldID0gZGF0YVtrZXldXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cdFxuXHRcdFx0aWYoa2V5ID09ICd0eXBlJykge1xuXHRcdFx0XHRmb3JtYXR0ZWREYXRhW2tleV0gPSBkYXRhW2tleV07XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmKEFycmF5LmlzQXJyYXkoZGF0YVtrZXldKSkgIHtcblx0XHRcdFx0Zm9ybWF0dGVkRGF0YVtkYXNoVG9DYW1lbChrZXkpXSA9IGRhdGFba2V5XTtcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cdFx0XHRpZih0eXBlb2YgZGF0YVtrZXldID09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChrZXkgPT0gJ2F0dHJpYnV0ZXMnKSB7XG5cdFx0XHRcdFx0T2JqZWN0LmFzc2lnbihmb3JtYXR0ZWREYXRhLCB0aGlzLm5vcm1hbGl6ZUF0dHJpYnV0ZXMoZGF0YVtrZXldKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGtleSA9PSAncmVsYXRpb25zaGlwcycpIHtcblx0XHRcdFx0XHRPYmplY3QuYXNzaWduKGZvcm1hdHRlZERhdGEsIHRoaXMubm9ybWFsaXplUmVsYXRpb25zaGlwcyhkYXRhW2tleV0sIGluY2x1ZGVkKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvcm1hdHRlZERhdGFbZGFzaFRvQ2FtZWwoa2V5KV0gPSB0aGlzLm5vcm1hbGl6ZUF0dHJpYnV0ZXMoZGF0YVtrZXldKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZvcm1hdHRlZERhdGFbZGFzaFRvQ2FtZWwoa2V5KV0gPSBkYXRhW2tleV07XG5cdFx0XHRyZXR1cm47XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGZvcm1hdHRlZERhdGE7XG5cdH1cblxuXHRub3JtYWxpemVSZWxhdGlvbnNoaXBzKGRhdGEsIGluY2x1ZGVkKSB7XG5cdFx0bGV0IGZvcm1hdHRlZERhdGEgPSB7fTtcblxuXHRcdE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdGxldCByZWxhdGlvbkRhdGEgPSB7fTtcblx0XHRcdFxuXHRcdFx0aWYoaXNFbXB0eShkYXRhW2tleV0uZGF0YSkpIHsgcmV0dXJuIH1cblx0XHRcdFxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShkYXRhW2tleV0uZGF0YSkpICB7XG5cdFx0XHRcdGZvcm1hdHRlZERhdGFbZGFzaFRvQ2FtZWwoa2V5KV0gPSB0aGlzLm5vcm1hbGl6ZVJlbGF0aW9uc2hpcEFycmF5KGRhdGFba2V5XS5kYXRhLCBpbmNsdWRlZCk7XG5cdFx0XHRcdHJldHVyblxuXHRcdFx0fVxuXHRcdFx0aWYodHlwZW9mIGRhdGFba2V5XS5kYXRhID09ICdvYmplY3QnKSB7XG5cdFx0XHRcdHJlbGF0aW9uRGF0YVsnaWQnXSA9IGRhdGFba2V5XS5kYXRhLmlkO1xuXHRcdFx0XHRyZWxhdGlvbkRhdGFbJ3R5cGUnXSA9IGRhdGFba2V5XS5kYXRhLnR5cGU7XG5cblx0XHRcdFx0bGV0IGluY2x1ZGUgPSBpbmNsdWRlZC5maW5kKGluY2x1ZGUgPT4gaW5jbHVkZS50eXBlID09PSByZWxhdGlvbkRhdGEudHlwZSAmJiBpbmNsdWRlLmlkID09PSByZWxhdGlvbkRhdGEuaWQpO1xuXG5cdFx0XHRcdGlmKCFpc0VtcHR5KGluY2x1ZGUpKSB7XG5cdFx0XHRcdFx0Zm9ybWF0dGVkRGF0YVtkYXNoVG9DYW1lbChrZXkpXSA9IHRoaXMubm9ybWFsaXplQXR0cmlidXRlcyhpbmNsdWRlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9ybWF0dGVkRGF0YVtkYXNoVG9DYW1lbChrZXkpXSA9IHJlbGF0aW9uRGF0YTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBmb3JtYXR0ZWREYXRhO1xuXHR9XG5cblx0bm9ybWFsaXplUmVsYXRpb25zaGlwQXJyYXkoZGF0YSwgaW5jbHVkZWQpIHtcblx0XHRsZXQgZm9ybWF0dGVkQXJyYXkgPSBbXTtcblxuXHRcdGRhdGEuZm9yRWFjaChkYXRhID0+IHtcblx0XHRcdGxldCBmb3JtYXR0ZWREYXRhID0ge307XG5cblx0XHRcdGZvcm1hdHRlZERhdGFbJ2lkJ10gPSBkYXRhLmlkO1xuXHRcdFx0Zm9ybWF0dGVkRGF0YVsndHlwZSddID0gZGF0YS50eXBlO1xuXG5cdFx0XHRsZXQgaW5jbHVkZSA9IGluY2x1ZGVkLmZpbmQoaW5jbHVkZSA9PiBpbmNsdWRlLnR5cGUgPT09IGZvcm1hdHRlZERhdGEudHlwZSAmJiBpbmNsdWRlLmlkID09PSBmb3JtYXR0ZWREYXRhLmlkKTtcblxuXHRcdFx0aWYoIWlzRW1wdHkoaW5jbHVkZSkpIHtcblx0XHRcdFx0Zm9ybWF0dGVkQXJyYXkucHVzaCh0aGlzLm5vcm1hbGl6ZUF0dHJpYnV0ZXMoaW5jbHVkZSkpO1xuXHRcdFx0XHRyZXR1cm5cblx0XHRcdH1cblx0XHRcdGZvcm1hdHRlZEFycmF5LnB1c2goZm9ybWF0dGVkRGF0YSk7XG5cdFx0XHRyZXR1cm5cblx0XHR9KTtcblx0XHRyZXR1cm4gZm9ybWF0dGVkQXJyYXk7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBTZXJpYWxpemVyOyIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hTjtcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlclJlc3Q7XG4iLCIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iLCJ2YXIgYmFzZVNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVNldFRvU3RyaW5nJyksXG4gICAgc2hvcnRPdXQgPSByZXF1aXJlKCcuL19zaG9ydE91dCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvU3RyaW5nO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCIvKipcbiAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAYWxpYXMgZmlyc3RcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAxXG4gKlxuICogXy5oZWFkKFtdKTtcbiAqIC8vID0+IHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhlYWQ7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpO1xuXG4vKipcbiAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuO1xuIiwidmFyIGJhc2VQdWxsQWxsID0gcmVxdWlyZSgnLi9fYmFzZVB1bGxBbGwnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAqXG4gKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAqXG4gKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICogY29uc29sZS5sb2coYXJyYXkpO1xuICogLy8gPT4gWydiJywgJ2InXVxuICovXG5mdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgIDogYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHVsbEFsbDtcbiIsInZhciBiYXNlVW5zZXQgPSByZXF1aXJlKCcuL19iYXNlVW5zZXQnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQdWxsQXQ7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU29ydGVkVW5pcTtcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5JyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIHVuemlwID0gcmVxdWlyZSgnLi91bnppcCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy44LjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAqXG4gKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAqIC8vID0+IFszLCAzMCwgMzAwXVxuICovXG5mdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW56aXBXaXRoO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwiLyoqXG4gKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0ge307XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VaaXBPYmplY3Q7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBsdXJhbGl6ZSBmcm9tICdwbHVyYWxpemUnO1xuaW1wb3J0IEF4aW9zIGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICdzdG9yZS91dGlscy90cmFuc2Zvcm1zJztcbmltcG9ydCB7IGFkZE9iamVjdCwgcmVtb3ZlT2JqZWN0LCB0aW1lb3V0LCBpc0VtcHR5IH0gZnJvbSAnc3RvcmUvdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgRGV2TG9nZ2VyIGZyb20gJ3N0b3JlL3V0aWxzL2Rldi1sb2dnZXInO1xuXG5jbGFzcyBBcHBNb2RlbCB7XG5cdGNvbnN0cnVjdG9yKHR5cGUsIHN0b3JlLCBwcm9wcyA9IHt9KSB7XG5cdFx0dGhpcy5pZCA9IHByb3BzLmlkIHx8ICcnO1xuXHRcdHRoaXMudHlwZSA9IGNhbWVsVG9EYXNoKHR5cGUpLnRvTG93ZXJDYXNlKCk7XG5cblx0XHR0aGlzLnVwZGF0ZWRBdCA9IHByb3BzLnVwZGF0ZWRBdCB8fCAnJztcblx0XHR0aGlzLmNyZWF0ZWRBdCA9IHByb3BzLmNyZWF0ZWRBdCB8fCAnJztcblxuXHRcdHRoaXMuc3RvcmUgPSBzdG9yZSB8fCB7fTtcblx0XHR0aGlzLmxvZyA9IFtdO1xuXHR9XG5cblxuXHQvLyBNZXRob2RzXG5cdGdldChwcm9wLCB2YWx1ZSkge1xuXHRcdHJldHVybiB0aGlzW3Byb3BdO1xuXHR9XG5cblx0c2V0KHByb3AsIHZhbHVlKSB7XG5cdFx0aWYgKHByb3AuaW5jbHVkZXMoJy4nKSkge1xuXHRcdFx0bGV0IG5hbWVzID0gcHJvcC5zcGxpdCgnLicpO1xuXHRcdFx0bGV0IG5lc3RlZE9iamVjdCA9IHRoaXM7XG5cdFx0XHRuYW1lcy5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRpZiAobmFtZXMubGVuZ3RoIC0gMiA9PSBpbmRleCkge1xuXHRcdFx0XHRcdG5lc3RlZE9iamVjdCA9IG5lc3RlZE9iamVjdFtuYW1lXTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRuZXN0ZWRPYmplY3RbbmFtZXNbbmFtZXMubGVuZ3RoIC0gMV1dID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXNbcHJvcF0gPSB2YWx1ZTtcblx0XHR9XG5cdFx0dGhpcy5zdG9yZS51cGRhdGVTdG9yZSh0aGlzLnR5cGUpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0c2V0UmVsYXRpb24ocmVsYXRpb24sIHZhbHVlKSB7XG5cdFx0aWYoIWlzRW1wdHkodGhpc1tyZWxhdGlvbl0pKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zZXQoW3JlbGF0aW9uXSwgdmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5zZXQoW3JlbGF0aW9uXSwgdGhpcy5zdG9yZS5jcmVhdGVSZWNvcmQocmVsYXRpb24sIHZhbHVlKSk7XG5cdH1cblxuXHR1cGRhdGVQcm9wcyhwcm9wcykge1xuXHRcdE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHRpZiAoa2V5ID09ICd0eXBlJykgeyByZXR1cm4gfTtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KHRoaXNba2V5XSkgJiYgIWlzRW1wdHkodGhpc1trZXldWzBdKSAmJiB0aGlzW2tleV1bMF0uaWQpIHsgcmV0dXJuIH07XG5cdFx0XHRpZiAodHlwZW9mIHRoaXNba2V5XSA9PSAnb2JqZWN0JyAmJiB0aGlzW2tleV0uaWQpIHsgcmV0dXJuIH07XG5cdFx0XHR0aGlzW2tleV0gPSBwcm9wc1trZXldO1xuXHRcdH0pO1xuXHR9XG5cblx0XG5cdC8vIFN0b3JhZ2Vcblx0YXR0cih0eXBlLCBwcm9wID0gJycpIHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgJ2RlY2ltYWwnOlxuXHRcdFx0XHRyZXR1cm4gcGFyc2VGbG9hdChwcm9wKSB8fCAwO1xuXG5cdFx0XHRjYXNlICdpbnRlZ2VyJzpcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KHByb3ApIHx8IDA7XG5cblx0XHRcdGNhc2UgJ3N0cmluZyc6XG5cdFx0XHRcdHJldHVybiBTdHJpbmcocHJvcCkgfHwgJyc7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBwcm9wO1xuXHRcdH1cblx0fVxuXG5cdGJlbG9uZ3NUbyhtb2RlbE5hbWUsIHByb3BzKSB7XG5cdFx0bGV0IHJlbGF0aW9uc2hpcCA9ICFpc0VtcHR5KHByb3BzKSA/IHRoaXMuc3RvcmUucGVla09yQ3JlYXRlUmVjb3JkKG1vZGVsTmFtZSwgcHJvcHMpIDoge307XG5cdFx0cmV0dXJuIHJlbGF0aW9uc2hpcDtcblx0fVxuXG5cdGhhc01hbnkobW9kZWxOYW1lLCBwcm9wcykge1xuXHQgXHRsZXQgcmVsYXRpb25zaGlwcyA9ICFpc0VtcHR5KHByb3BzKSA/IHByb3BzLm1hcChwID0+IHRoaXMuc3RvcmUucGVla09yQ3JlYXRlUmVjb3JkKFBsdXJhbGl6ZS5zaW5ndWxhcihtb2RlbE5hbWUpLCBwKSkgOiBbXTtcblx0IFx0cmV0dXJuIHJlbGF0aW9uc2hpcHM7XG5cdH1cblxuXHRwdXNoKG5hbWUsIHZhbHVlKSB7XG5cdFx0YWRkT2JqZWN0KHRoaXNbbmFtZV0sIHZhbHVlKTtcblx0XHRyZXR1cm4gdGhpcy5zdG9yZS5wdXNoUmVjb3JkKHRoaXMudHlwZSwgdGhpcyk7XG5cdH1cblxuXHRyZW1vdmUobmFtZSwgdmFsdWUpIHtcblx0XHRyZW1vdmVPYmplY3QodGhpc1tuYW1lXSwgdmFsdWUpO1xuXHRcdHJldHVybiB0aGlzLnN0b3JlLnB1c2hSZWNvcmQodGhpcy50eXBlLCB0aGlzKTtcblx0fVxuXG5cblx0Ly8gTmV0d29yayBjYWxsc1xuXHRhc3luYyBzYXZlKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCB0aW1lb3V0KDMwMCk7XG5cdFx0XHRsZXQgZGF0YSA9IHRoaXMuc3RvcmUuc2VyaWFsaXplckZvcih0aGlzLnR5cGUpLnNlcmlhbGl6ZSh0aGlzKTtcblx0XHRcdGxldCByZXNwb25zZSA9IHRoaXMuaWQgPyBhd2FpdCB0aGlzLnVwZGF0ZShkYXRhKSA6IGF3YWl0IHRoaXMuY3JlYXRlKGRhdGEpO1xuXHRcdFx0bGV0IGZvcm1hdHRlZFJlc3BvbnNlID0gdGhpcy5zdG9yZS5zZXJpYWxpemVyRm9yKHRoaXMudHlwZSkubm9ybWFsaXplKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLmluY2x1ZGVkLCByZXNwb25zZS5tZXRhKTtcblx0XHRcdERldkxvZ2dlcignU2VydmVyIFJlc3BvbnNlOiAnLCBmb3JtYXR0ZWRSZXNwb25zZSk7XG5cdFx0XHR0aGlzLnVwZGF0ZVByb3BzKGZvcm1hdHRlZFJlc3BvbnNlKTtcblx0XHRcdHJldHVybiBmb3JtYXR0ZWRSZXNwb25zZTtcblx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdHRocm93IGU7XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgY3JlYXRlKGRhdGEpIHtcblx0XHR0cnkge1xuXHRcdFx0bGV0IHVybCA9IHRoaXMuc3RvcmUuYWRhcHRlckZvcih0aGlzLnR5cGUpLnVybEZvckNyZWF0ZVJlY29yZCh0aGlzLnR5cGUpO1xuXHRcdFx0bGV0IHJlc3BvbnNlID0gYXdhaXQgQXhpb3MucG9zdCh1cmwsIGRhdGEpO1xuXHRcdFx0cmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIHVwZGF0ZShkYXRhKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCB1cmwgPSB0aGlzLnN0b3JlLmFkYXB0ZXJGb3IodGhpcy50eXBlKS51cmxGb3JVcGRhdGVSZWNvcmQodGhpcy50eXBlLCB0aGlzLmlkKTtcblx0XHRcdGxldCByZXNwb25zZSA9IGF3YWl0IEF4aW9zLnB1dCh1cmwsIGRhdGEpO1xuXHRcdFx0cmV0dXJuIHJlc3BvbnNlLmRhdGE7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIGRlc3Ryb3koKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHRpbWVvdXQoMzAwKTtcblx0XHRcdGxldCB1cmwgPSB0aGlzLnN0b3JlLmFkYXB0ZXJGb3IodGhpcy50eXBlKS51cmxGb3JEZXN0cm95UmVjb3JkKHRoaXMudHlwZSwgdGhpcy5pZCk7XG5cdFx0XHRsZXQgcmVzcG9uc2UgPSBhd2FpdCBBeGlvcy5kZWxldGUodXJsKTtcblx0XHRcdGxldCBmb3JtYXR0ZWRSZXNwb25zZSA9IHRoaXMuc3RvcmUuc2VyaWFsaXplckZvcih0aGlzLnR5cGUpLm5vcm1hbGl6ZShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5pbmNsdWRlZCwgcmVzcG9uc2UubWV0YSk7XG5cdFx0XHREZXZMb2dnZXIoJ1NlcnZlciBSZXNwb25zZTogJywgZm9ybWF0dGVkUmVzcG9uc2UpO1xuXHRcdFx0dGhpcy5zdG9yZS5yZW1vdmVSZWNvcmQodGhpcy50eXBlLCB0aGlzKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBNb2RlbDsiLCJpbXBvcnQgeyBTdG9yZUNvbnRleHQsIHdpdGhTdG9yZSB9IGZyb20gJ3N0b3JlL2NvbnRleHRzL3N0b3JlJztcbmltcG9ydCBBcHBBZGFwdGVyIGZyb20gJ3N0b3JlL2FkYXB0ZXJzL2FwcCc7XG5pbXBvcnQgQXBwU2VyaWFsaXplciBmcm9tICdzdG9yZS9zZXJpYWxpemVycy9hcHAnO1xuaW1wb3J0IEFwcE1vZGVsIGZyb20gJ3N0b3JlL21vZGVscy9hcHAnO1xuXG5leHBvcnQge1xuXHRTdG9yZUNvbnRleHQsXG5cdHdpdGhTdG9yZSxcblx0QXBwQWRhcHRlcixcblx0QXBwU2VyaWFsaXplcixcblx0QXBwTW9kZWwsXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBcHBBZGFwdGVyIGZyb20gJ3N0b3JlL2FkYXB0ZXJzL2FwcCc7XG5cbmltcG9ydCBhZGFwdGVyRm9yIGZyb20gJ3N0b3JlL2hlbHBlcnMvYWRhcHRlci1mb3InO1xuaW1wb3J0IHNlcmlhbGl6ZXJGb3IgZnJvbSAnc3RvcmUvaGVscGVycy9zZXJpYWxpemVyLWZvcic7XG5pbXBvcnQgbW9kZWxGb3IgZnJvbSAnc3RvcmUvaGVscGVycy9tb2RlbC1mb3InO1xuXG5pbXBvcnQgSnNvbkFwaUVycm9ycyBmcm9tICdzdG9yZS91dGlscy9qc29uLWFwaS1lcnJvcnMnO1xuaW1wb3J0IHsgYWRkT2JqZWN0LCByZW1vdmVPYmplY3QsIHRpbWVFbGFwc2VkLCBpc0VtcHR5IH0gZnJvbSAnc3RvcmUvdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgRGV2TG9nZ2VyIGZyb20gJ3N0b3JlL3V0aWxzL2Rldi1sb2dnZXInO1xuXG5leHBvcnQgY29uc3QgU3RvcmUgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cbmNsYXNzIFN0b3JlQ29udGV4dCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBhcGlEb21haW46IHRoaXMucHJvcHMuYXBpRG9tYWluIHx8ICcnLFxuICAgICAgYWRhcHRlckZvcjogdGhpcy5hZGFwdGVyRm9yLmJpbmQodGhpcyksXG4gICAgICBtb2RlbEZvcjogdGhpcy5tb2RlbEZvci5iaW5kKHRoaXMpLFxuICAgICAgc2VyaWFsaXplckZvcjogdGhpcy5zZXJpYWxpemVyRm9yLmJpbmQodGhpcyksXG4gICAgICBjcmVhdGVSZWNvcmQ6IHRoaXMuY3JlYXRlUmVjb3JkLmJpbmQodGhpcyksXG4gICAgICBwdXNoQWxsOiB0aGlzLnB1c2hBbGwuYmluZCh0aGlzKSxcbiAgICAgIHB1c2hSZWNvcmQ6IHRoaXMucHVzaFJlY29yZC5iaW5kKHRoaXMpLFxuICAgICAgcGVla0FsbDogdGhpcy5wZWVrQWxsLmJpbmQodGhpcyksXG4gICAgICBwZWVrUmVjb3JkOiB0aGlzLnBlZWtSZWNvcmQuYmluZCh0aGlzKSxcbiAgICAgIHBlZWtPckNyZWF0ZVJlY29yZDogdGhpcy5wZWVrT3JDcmVhdGVSZWNvcmQuYmluZCh0aGlzKSxcbiAgICAgIHVwZGF0ZVJlY29yZDogdGhpcy51cGRhdGVSZWNvcmQuYmluZCh0aGlzKSxcbiAgICAgIHVwZGF0ZVN0b3JlOiB0aGlzLnVwZGF0ZVN0b3JlLmJpbmQodGhpcyksXG4gICAgICBmaW5kQWxsOiB0aGlzLmZpbmRBbGwuYmluZCh0aGlzKSxcbiAgICAgIGZpbmRSZWNvcmQ6IHRoaXMuZmluZFJlY29yZC5iaW5kKHRoaXMpLFxuICAgICAgcXVlcnk6IHRoaXMucXVlcnkuYmluZCh0aGlzKSxcbiAgICAgIHF1ZXJ5UmVjb3JkOiB0aGlzLnF1ZXJ5UmVjb3JkLmJpbmQodGhpcyksXG4gICAgICBhcGlSZXF1ZXN0OiB0aGlzLmFwaVJlcXVlc3QuYmluZCh0aGlzKSxcbiAgICAgIHJlbW92ZUFsbDogdGhpcy5yZW1vdmVBbGwuYmluZCh0aGlzKSxcbiAgICAgIHJlbW92ZVJlY29yZDogdGhpcy5yZW1vdmVSZWNvcmQuYmluZCh0aGlzKSxcbiAgICAgIGlzTG9hZGVkOiB0cnVlLFxuICAgIH07XG4gIH07XG5cbiAgXG4gIC8vIEhvb2tzXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuYWRhcHRlckZvcignJykudGhlbihhZGFwdGVyID0+IHtcbiAgICAgIGFkYXB0ZXIuc2V0KCdhcGlEb21haW4nLCB0aGlzLnN0YXRlLmFwaURvbWFpbik7XG4gICAgICBjb25zb2xlLmxvZygnYXBpRG9tYWluOiAnLCBhZGFwdGVyLmdldCgnYXBpRG9tYWluJykpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGVkOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgXG4gIC8vIEhlbHBlcnNcbiAgYWRhcHRlckZvcihtb2RlbE5hbWUpIHtcbiAgICByZXR1cm4gYWRhcHRlckZvcihtb2RlbE5hbWUsIHRoaXMuc3RhdGUpO1xuICB9XG5cbiAgbW9kZWxGb3IobW9kZWxOYW1lLCBkYXRhKSB7XG4gICAgcmV0dXJuIG1vZGVsRm9yKG1vZGVsTmFtZSwgdGhpcy5zdGF0ZSwgZGF0YSk7XG4gIH1cblxuICBzZXJpYWxpemVyRm9yKG1vZGVsTmFtZSwgZGF0YSkge1xuICAgIHJldHVybiBzZXJpYWxpemVyRm9yKG1vZGVsTmFtZSwgdGhpcy5zdGF0ZSwgZGF0YSk7XG4gIH1cblxuXG4gIC8vIFJlY29yZHNcbiAgYXN5bmMgY3JlYXRlUmVjb3JkKG1vZGVsTmFtZSwgZGF0YSkge1xuICAgIGxldCByZWNvcmQgPSBhd2FpdCBtb2RlbEZvcihtb2RlbE5hbWUsIHRoaXMuc3RhdGUsIGRhdGEpO1xuICAgIHJldHVybiB0aGlzLnB1c2hSZWNvcmQobW9kZWxOYW1lLCByZWNvcmQpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlUmVjb3JkKG1vZGVsTmFtZSwgc3RvcmVSZWNvcmQsIHJlY29yZCkge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnJlbW92ZVJlY29yZChtb2RlbE5hbWUsIHN0b3JlUmVjb3JkKTtcbiAgICBsZXQgbmV3UmVjb3JkID0gYXdhaXQgdGhpcy5jcmVhdGVSZWNvcmQobW9kZWxOYW1lLCByZWNvcmQpO1xuICAgIHJldHVybiBuZXdSZWNvcmQ7XG4gIH1cblxuICB1cGRhdGVTdG9yZShtb2RlbE5hbWUpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IG1vZGVscyA9IHRoaXMuc3RhdGVbbW9kZWxOYW1lXSB8fCBbXTtcbiAgICB0aGlzLnNldFN0YXRlKHsgW21vZGVsTmFtZV06ICBtb2RlbHMgfSk7XG4gICAgbG9nZ2VyKCdTdG9yZTogJywgdGhpcy5zdGF0ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuXG4gIC8vIFBlZWtzXG4gIHBlZWtBbGwobW9kZWxOYW1lKSB7XG4gICAgbGV0IG1vZGVscyA9IHRoaXMuc3RhdGVbbW9kZWxOYW1lXSB8fCBbXTtcbiAgICByZXR1cm4gbW9kZWxzO1xuICB9XG5cbiAgcGVla1JlY29yZChtb2RlbE5hbWUsIHJlY29yZElEKSB7XG4gICAgbGV0IG1vZGVscyA9IHRoaXMuc3RhdGVbbW9kZWxOYW1lXSB8fCBbXTtcbiAgICBsZXQgc3RvcmVSZWNvcmQgPSBtb2RlbHMuZmluZChtb2RlbCA9PiBtb2RlbC5pZCA9PSByZWNvcmRJRCk7XG4gICAgcmV0dXJuIHN0b3JlUmVjb3JkID8gc3RvcmVSZWNvcmQgOiB7fTtcbiAgfVxuXG4gIGFzeW5jIHBlZWtPckNyZWF0ZVJlY29yZChtb2RlbE5hbWUsIHJlY29yZCkge1xuICAgIGxldCBtb2RlbHMgPSB0aGlzLnN0YXRlW21vZGVsTmFtZV0gfHwgW107XG4gICAgbGV0IHN0b3JlUmVjb3JkID0gdGhpcy5wZWVrUmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkLmlkKTtcbiAgICByZXR1cm4gc3RvcmVSZWNvcmQgPyBzdG9yZVJlY29yZCA6IHRoaXMuY3JlYXRlUmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkKTtcbiAgfVxuXG4gIC8vIE1pc2NcbiAgYXN5bmMgcHVzaEFsbChtb2RlbE5hbWUsIHJlY29yZHMpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IG1vZGVscyA9IHRoaXMuc3RhdGVbbW9kZWxOYW1lXSB8fCBbXTtcbiAgICBsZXQgbmV3UmVjb3JkcyA9IHJlY29yZHMubWFwKGFzeW5jIHJlY29yZCA9PiB7XG4gICAgICBsZXQgc3RvcmVSZWNvcmQgPSB0aGlzLnBlZWtSZWNvcmQobW9kZWxOYW1lLCByZWNvcmQuaWQpO1xuICAgICAgaWYgKHN0b3JlUmVjb3JkKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZVJlY29yZChtb2RlbE5hbWUsIHN0b3JlUmVjb3JkLCByZWNvcmQpXG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jcmVhdGVSZWNvcmQobW9kZWxOYW1lLCByZWNvcmQpO1xuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChuZXdSZWNvcmRzKTtcbiAgfTtcblxuICBwdXNoUmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGxldCBtb2RlbHMgPSB0aGlzLnN0YXRlW21vZGVsTmFtZV0gfHwgW107XG4gICAgbW9kZWxzLnB1c2gocmVjb3JkKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgW21vZGVsTmFtZV06ICBtb2RlbHMgfSk7XG4gICAgRGV2TG9nZ2VyKCdTdG9yZTogJywgdGhpcy5zdGF0ZSk7XG4gICAgcmV0dXJuIHJlY29yZDtcbiAgfTtcblxuICBhc3luYyBmaW5kQWxsKG1vZGVsTmFtZSwgcGFyYW1zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBzdG9yZVJlY29yZHMgPSB0aGlzLnN0YXRlW21vZGVsTmFtZV0gfHwgW107XG4gICAgICBpZighaXNFbXB0eShzdG9yZVJlY29yZHMpKSB7XG4gICAgICAgIHJldHVybiBzdG9yZVJlY29yZHM7XG4gICAgICB9XG4gICAgICAvLyBGZXRjaCBBbGxcbiAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWRhcHRlckZvcihtb2RlbE5hbWUpLnRoZW4oYWRhcHRlciA9PiBhZGFwdGVyLmZpbmRBbGwobW9kZWxOYW1lLCBwYXJhbXMpKTtcbiAgICAgIGxldCByZWNvcmRzID0gYXdhaXQgdGhpcy5zZXJpYWxpemVyRm9yKG1vZGVsTmFtZSkudGhlbihzZXJpYWxpemVyID0+IHNlcmlhbGl6ZXIubm9ybWFsaXplQXJyYXkocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaW5jbHVkZWQsIHJlc3BvbnNlLm1ldGEpKTtcbiAgICAgIGxldCBtb2RlbHMgPSBhd2FpdCB0aGlzLnB1c2hBbGwobW9kZWxOYW1lLCByZWNvcmRzLnJlY29yZHMpO1xuICAgICAgbW9kZWxzLm1ldGEgPSByZWNvcmRzLm1ldGE7XG4gICAgICBEZXZMb2dnZXIoJ1N0b3JlOiAnLCB0aGlzLnN0YXRlKTtcbiAgICAgIHJldHVybiBtb2RlbHM7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aHJvdyBKc29uQXBpRXJyb3JzLmZvcm1hdEVycm9ycyhlKTtcbiAgICB9XG4gIH07XG5cbiAgYXN5bmMgZmluZFJlY29yZChtb2RlbE5hbWUsIHJlY29yZElELCBwYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHN0b3JlUmVjb3JkID0gdGhpcy5wZWVrUmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkSUQpO1xuICAgICAgaWYoc3RvcmVSZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIHN0b3JlUmVjb3JkO1xuICAgICAgfVxuICAgICAgLy8gRmV0Y2ggUmVjb3JkXG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFkYXB0ZXJGb3IobW9kZWxOYW1lKS50aGVuKGFkYXB0ZXIgPT4gYWRhcHRlci5maW5kUmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkSUQsIHBhcmFtcykpO1xuICAgICAgbGV0IHJlY29yZCA9IGF3YWl0IHRoaXMuc2VyaWFsaXplckZvcihtb2RlbE5hbWUpLnRoZW4oc2VyaWFsaXplciA9PiBzZXJpYWxpemVyLm5vcm1hbGl6ZShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5pbmNsdWRlZCkpO1xuICAgICAgbGV0IG1vZGVsID0gYXdhaXQgdGhpcy5jcmVhdGVSZWNvcmQobW9kZWxOYW1lLCByZWNvcmQpO1xuICAgICAgRGV2TG9nZ2VyKCdTdG9yZTogJywgdGhpcy5zdGF0ZSk7XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aHJvdyBKc29uQXBpRXJyb3JzLmZvcm1hdEVycm9ycyhlKTtcbiAgICB9XG4gIH07XG5cbiAgYXN5bmMgcXVlcnkobW9kZWxOYW1lLCBwYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hZGFwdGVyRm9yKG1vZGVsTmFtZSkudGhlbihhZGFwdGVyID0+IGFkYXB0ZXIucXVlcnkobW9kZWxOYW1lLCBwYXJhbXMpKTtcbiAgICAgIGxldCByZWNvcmRzID0gYXdhaXQgdGhpcy5zZXJpYWxpemVyRm9yKG1vZGVsTmFtZSkudGhlbihzZXJpYWxpemVyID0+IHNlcmlhbGl6ZXIubm9ybWFsaXplQXJyYXkocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaW5jbHVkZWQsIHJlc3BvbnNlLm1ldGEpKTtcbiAgICAgIGxldCBtb2RlbHMgPSBhd2FpdCB0aGlzLnB1c2hBbGwobW9kZWxOYW1lLCByZWNvcmRzLnJlY29yZHMpO1xuICAgICAgbW9kZWxzLm1ldGEgPSByZWNvcmRzLm1ldGE7XG4gICAgICBEZXZMb2dnZXIoJ01vZGVsczogJywgbW9kZWxzKTtcbiAgICAgIERldkxvZ2dlcignU3RvcmU6ICcsIHRoaXMuc3RhdGUpO1xuICAgICAgcmV0dXJuIG1vZGVscztcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHRocm93IEpzb25BcGlFcnJvcnMuZm9ybWF0RXJyb3JzKGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHF1ZXJ5UmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkSUQsIHBhcmFtcykge1xuICAgIHRyeSB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFkYXB0ZXJGb3IobW9kZWxOYW1lKS50aGVuKGFkYXB0ZXIgPT4gYWRhcHRlci5xdWVyeVJlY29yZChtb2RlbE5hbWUsIHJlY29yZElELCBwYXJhbXMpKTtcbiAgICAgIGxldCByZWNvcmQgPSB0aGlzLnNlcmlhbGl6ZXJGb3IobW9kZWxOYW1lKS50aGVuKHNlcmlhbGl6ZXIgPT4gc2VyaWFsaXplci5ub3JtYWxpemUocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaW5jbHVkZWQpKTtcbiAgICAgIGxldCBzdG9yZVJlY29yZCA9IHRoaXMucGVla1JlY29yZChtb2RlbE5hbWUsIHJlY29yZC5pZCk7XG4gICAgICBsZXQgbW9kZWwgPSBzdG9yZVJlY29yZCA/IHRoaXMudXBkYXRlUmVjb3JkKG1vZGVsTmFtZSwgc3RvcmVSZWNvcmQsIHJlY29yZCkgOiB0aGlzLmNyZWF0ZVJlY29yZChtb2RlbE5hbWUsIHJlY29yZCk7XG4gICAgICBEZXZMb2dnZXIoJ1N0b3JlOiAnLCB0aGlzLnN0YXRlKTtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHRocm93IEpzb25BcGlFcnJvcnMuZm9ybWF0RXJyb3JzKGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGFwaVJlcXVlc3QobW9kZWxOYW1lLCByZWNvcmRJRCwgcGFyYW1zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWRhcHRlckZvcihtb2RlbE5hbWUpLnRoZW4oYWRhcHRlciA9PiBhZGFwdGVyLnF1ZXJ5UmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkSUQsIHBhcmFtcykpO1xuICAgICAgbGV0IHJlY29yZCA9IHRoaXMuc2VyaWFsaXplckZvcihtb2RlbE5hbWUpLnRoZW4oc2VyaWFsaXplciA9PiBzZXJpYWxpemVyLm5vcm1hbGl6ZShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5pbmNsdWRlZCkpO1xuICAgICAgRGV2TG9nZ2VyKCdTZXJ2ZXIgUmVzcG9uc2U6ICcsIHJlY29yZCk7XG4gICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVBbGwobW9kZWxOYW1lLCByZWNvcmRzKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHN0YXRlW21vZGVsTmFtZV0gPSBbXTtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICBEZXZMb2dnZXIoJ1N0b3JlOiAnLCBzdGF0ZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmVtb3ZlUmVjb3JkKG1vZGVsTmFtZSwgcmVjb3JkKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGxldCBtb2RlbHMgPSBzdGF0ZVttb2RlbE5hbWVdIHx8IFtdO1xuICAgIGxldCBtb2RlbCA9IG1vZGVscy5maW5kKG1vZGVsID0+IG1vZGVsLmlkID09IHJlY29yZC5pZCk7XG4gICAgbW9kZWxzID0gcmVtb3ZlT2JqZWN0KG1vZGVscywgbW9kZWwpO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIERldkxvZ2dlcignU3RvcmU6ICcsIHRoaXMuc3RhdGUpO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG5cbiAgLy8gUmVuZGVyXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGlzTG9hZGVkIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGlzTG9hZGVkKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3RvcmUuUHJvdmlkZXIgdmFsdWU9e3RoaXMuc3RhdGV9PlxuICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICA8L1N0b3JlLlByb3ZpZGVyPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IHdpdGhTdG9yZSA9IGZ1bmN0aW9uKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3RvcmUuQ29uc3VtZXI+XG4gICAgICAgICAge3N0YXRlID0+IDxXcmFwcGVkQ29tcG9uZW50IHN0b3JlPXtzdGF0ZX0gey4uLnRoaXMucHJvcHN9IC8+fVxuICAgICAgICA8L1N0b3JlLkNvbnN1bWVyPlxuICAgICAgKTtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgeyBTdG9yZUNvbnRleHQsIHdpdGhTdG9yZSB9OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgQXBwQWRhcHRlciBmcm9tICdzdG9yZS9hZGFwdGVycy9hcHAnO1xuaW1wb3J0IHsgZGFzaFRvQ2FwaXRhbCB9IGZyb20gJ3N0b3JlL3V0aWxzL3RyYW5zZm9ybXMnO1xuXG5hc3luYyBmdW5jdGlvbiBhZGFwdGVyRm9yKG1vZGVsTmFtZSwgc3RvcmUsIGRhdGEgPSB7fSkge1xuXHRsZXQgbW9kdWxlcyA9IGF3YWl0IGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIC8qIHdlYnBhY2tNb2RlOiBcImxhenlcIiAqLyAnYWRhcHRlcnMnKTtcblx0Y29uc29sZS5sb2coJ21vZHVsZXM6ICcsIG1vZHVsZXMpO1xuXHRsZXQgQWRhcHRlciA9IG1vZHVsZXNbZGFzaFRvQ2FwaXRhbChtb2RlbE5hbWUpXTtcblx0cmV0dXJuIEFkYXB0ZXIgPyBBZGFwdGVyIDogQXBwQWRhcHRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWRhcHRlckZvcjsiLCIvLyAuZGlybmFtZSwgLmJhc2VuYW1lLCBhbmQgLmV4dG5hbWUgbWV0aG9kcyBhcmUgZXh0cmFjdGVkIGZyb20gTm9kZS5qcyB2OC4xMS4xLFxuLy8gYmFja3BvcnRlZCBhbmQgdHJhbnNwbGl0ZWQgd2l0aCBCYWJlbCwgd2l0aCBiYWNrd2FyZHMtY29tcGF0IGZpeGVzXG5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcuJztcbiAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gIHZhciBoYXNSb290ID0gY29kZSA9PT0gNDcgLyovKi87XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMTsgLS1pKSB7XG4gICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbmQgPT09IC0xKSByZXR1cm4gaGFzUm9vdCA/ICcvJyA6ICcuJztcbiAgaWYgKGhhc1Jvb3QgJiYgZW5kID09PSAxKSB7XG4gICAgLy8gcmV0dXJuICcvLyc7XG4gICAgLy8gQmFja3dhcmRzLWNvbXBhdCBmaXg6XG4gICAgcmV0dXJuICcvJztcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpO1xufTtcblxuZnVuY3Rpb24gYmFzZW5hbWUocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuXG4gIHZhciBzdGFydCA9IDA7XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gIHZhciBpO1xuXG4gIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGkpID09PSA0NyAvKi8qLykge1xuICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgIC8vIHBhdGggY29tcG9uZW50XG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgIGVuZCA9IGkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbmQgPT09IC0xKSByZXR1cm4gJyc7XG4gIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xufVxuXG4vLyBVc2VzIGEgbWl4ZWQgYXBwcm9hY2ggZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LCBhcyBleHQgYmVoYXZpb3IgY2hhbmdlZFxuLy8gaW4gbmV3IE5vZGUuanMgdmVyc2lvbnMsIHNvIG9ubHkgYmFzZW5hbWUoKSBhYm92ZSBpcyBiYWNrcG9ydGVkIGhlcmVcbmV4cG9ydHMuYmFzZW5hbWUgPSBmdW5jdGlvbiAocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gYmFzZW5hbWUocGF0aCk7XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59O1xuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbiAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgdmFyIHN0YXJ0UGFydCA9IDA7XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcbiAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgdmFyIHByZURvdFN0YXRlID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICBlbmQgPSBpICsgMTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgb3VyIGZpcnN0IGRvdCwgbWFyayBpdCBhcyB0aGUgc3RhcnQgb2Ygb3VyIGV4dGVuc2lvblxuICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKVxuICAgICAgICAgIHN0YXJ0RG90ID0gaTtcbiAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpXG4gICAgICAgICAgcHJlRG90U3RhdGUgPSAxO1xuICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cbiAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxuICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcbiAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgIHByZURvdFN0YXRlID09PSAxICYmIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xufTtcblxuZnVuY3Rpb24gZmlsdGVyICh4cywgZikge1xuICAgIGlmICh4cy5maWx0ZXIpIHJldHVybiB4cy5maWx0ZXIoZik7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSkgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBTdHJpbmcucHJvdG90eXBlLnN1YnN0ciAtIG5lZ2F0aXZlIGluZGV4IGRvbid0IHdvcmsgaW4gSUU4XG52YXIgc3Vic3RyID0gJ2FiJy5zdWJzdHIoLTEpID09PSAnYidcbiAgICA/IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbikgfVxuICAgIDogZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikge1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IHN0ci5sZW5ndGggKyBzdGFydDtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbik7XG4gICAgfVxuO1xuIiwiaW1wb3J0IEFwcFNlcmlhbGl6ZXIgZnJvbSAnc3RvcmUvc2VyaWFsaXplcnMvYXBwJztcbmltcG9ydCB7IGRhc2hUb0NhcGl0YWwgfSBmcm9tICdzdG9yZS91dGlscy90cmFuc2Zvcm1zJztcblxuYXN5bmMgZnVuY3Rpb24gc2VyaWFsaXplckZvcihtb2RlbE5hbWUsIHN0b3JlLCBkYXRhID0ge30pIHtcblx0bGV0IHNlcmlhbGl6ZXJzID0gYXdhaXQgaW1wb3J0KC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gLyogd2VicGFja01vZGU6IFwibGF6eVwiICovICdzZXJpYWxpemVycycpO1xuXHRjb25zb2xlLmxvZygnU2VyaWFsaXplcnM6ICcsIHNlcmlhbGl6ZXJzKTtcblx0bGV0IFNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyc1tkYXNoVG9DYXBpdGFsKG1vZGVsTmFtZSldO1xuXHRyZXR1cm4gU2VyaWFsaXplciA/IG5ldyBTZXJpYWxpemVyKHN0b3JlLCBkYXRhKSA6IG5ldyBBcHBTZXJpYWxpemVyKHN0b3JlLCBkYXRhKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VyaWFsaXplckZvcjsiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgJ2NodW5rJzogcmVxdWlyZSgnLi9jaHVuaycpLFxuICAnY29tcGFjdCc6IHJlcXVpcmUoJy4vY29tcGFjdCcpLFxuICAnY29uY2F0JzogcmVxdWlyZSgnLi9jb25jYXQnKSxcbiAgJ2RpZmZlcmVuY2UnOiByZXF1aXJlKCcuL2RpZmZlcmVuY2UnKSxcbiAgJ2RpZmZlcmVuY2VCeSc6IHJlcXVpcmUoJy4vZGlmZmVyZW5jZUJ5JyksXG4gICdkaWZmZXJlbmNlV2l0aCc6IHJlcXVpcmUoJy4vZGlmZmVyZW5jZVdpdGgnKSxcbiAgJ2Ryb3AnOiByZXF1aXJlKCcuL2Ryb3AnKSxcbiAgJ2Ryb3BSaWdodCc6IHJlcXVpcmUoJy4vZHJvcFJpZ2h0JyksXG4gICdkcm9wUmlnaHRXaGlsZSc6IHJlcXVpcmUoJy4vZHJvcFJpZ2h0V2hpbGUnKSxcbiAgJ2Ryb3BXaGlsZSc6IHJlcXVpcmUoJy4vZHJvcFdoaWxlJyksXG4gICdmaWxsJzogcmVxdWlyZSgnLi9maWxsJyksXG4gICdmaW5kSW5kZXgnOiByZXF1aXJlKCcuL2ZpbmRJbmRleCcpLFxuICAnZmluZExhc3RJbmRleCc6IHJlcXVpcmUoJy4vZmluZExhc3RJbmRleCcpLFxuICAnZmlyc3QnOiByZXF1aXJlKCcuL2ZpcnN0JyksXG4gICdmbGF0dGVuJzogcmVxdWlyZSgnLi9mbGF0dGVuJyksXG4gICdmbGF0dGVuRGVlcCc6IHJlcXVpcmUoJy4vZmxhdHRlbkRlZXAnKSxcbiAgJ2ZsYXR0ZW5EZXB0aCc6IHJlcXVpcmUoJy4vZmxhdHRlbkRlcHRoJyksXG4gICdmcm9tUGFpcnMnOiByZXF1aXJlKCcuL2Zyb21QYWlycycpLFxuICAnaGVhZCc6IHJlcXVpcmUoJy4vaGVhZCcpLFxuICAnaW5kZXhPZic6IHJlcXVpcmUoJy4vaW5kZXhPZicpLFxuICAnaW5pdGlhbCc6IHJlcXVpcmUoJy4vaW5pdGlhbCcpLFxuICAnaW50ZXJzZWN0aW9uJzogcmVxdWlyZSgnLi9pbnRlcnNlY3Rpb24nKSxcbiAgJ2ludGVyc2VjdGlvbkJ5JzogcmVxdWlyZSgnLi9pbnRlcnNlY3Rpb25CeScpLFxuICAnaW50ZXJzZWN0aW9uV2l0aCc6IHJlcXVpcmUoJy4vaW50ZXJzZWN0aW9uV2l0aCcpLFxuICAnam9pbic6IHJlcXVpcmUoJy4vam9pbicpLFxuICAnbGFzdCc6IHJlcXVpcmUoJy4vbGFzdCcpLFxuICAnbGFzdEluZGV4T2YnOiByZXF1aXJlKCcuL2xhc3RJbmRleE9mJyksXG4gICdudGgnOiByZXF1aXJlKCcuL250aCcpLFxuICAncHVsbCc6IHJlcXVpcmUoJy4vcHVsbCcpLFxuICAncHVsbEFsbCc6IHJlcXVpcmUoJy4vcHVsbEFsbCcpLFxuICAncHVsbEFsbEJ5JzogcmVxdWlyZSgnLi9wdWxsQWxsQnknKSxcbiAgJ3B1bGxBbGxXaXRoJzogcmVxdWlyZSgnLi9wdWxsQWxsV2l0aCcpLFxuICAncHVsbEF0JzogcmVxdWlyZSgnLi9wdWxsQXQnKSxcbiAgJ3JlbW92ZSc6IHJlcXVpcmUoJy4vcmVtb3ZlJyksXG4gICdyZXZlcnNlJzogcmVxdWlyZSgnLi9yZXZlcnNlJyksXG4gICdzbGljZSc6IHJlcXVpcmUoJy4vc2xpY2UnKSxcbiAgJ3NvcnRlZEluZGV4JzogcmVxdWlyZSgnLi9zb3J0ZWRJbmRleCcpLFxuICAnc29ydGVkSW5kZXhCeSc6IHJlcXVpcmUoJy4vc29ydGVkSW5kZXhCeScpLFxuICAnc29ydGVkSW5kZXhPZic6IHJlcXVpcmUoJy4vc29ydGVkSW5kZXhPZicpLFxuICAnc29ydGVkTGFzdEluZGV4JzogcmVxdWlyZSgnLi9zb3J0ZWRMYXN0SW5kZXgnKSxcbiAgJ3NvcnRlZExhc3RJbmRleEJ5JzogcmVxdWlyZSgnLi9zb3J0ZWRMYXN0SW5kZXhCeScpLFxuICAnc29ydGVkTGFzdEluZGV4T2YnOiByZXF1aXJlKCcuL3NvcnRlZExhc3RJbmRleE9mJyksXG4gICdzb3J0ZWRVbmlxJzogcmVxdWlyZSgnLi9zb3J0ZWRVbmlxJyksXG4gICdzb3J0ZWRVbmlxQnknOiByZXF1aXJlKCcuL3NvcnRlZFVuaXFCeScpLFxuICAndGFpbCc6IHJlcXVpcmUoJy4vdGFpbCcpLFxuICAndGFrZSc6IHJlcXVpcmUoJy4vdGFrZScpLFxuICAndGFrZVJpZ2h0JzogcmVxdWlyZSgnLi90YWtlUmlnaHQnKSxcbiAgJ3Rha2VSaWdodFdoaWxlJzogcmVxdWlyZSgnLi90YWtlUmlnaHRXaGlsZScpLFxuICAndGFrZVdoaWxlJzogcmVxdWlyZSgnLi90YWtlV2hpbGUnKSxcbiAgJ3VuaW9uJzogcmVxdWlyZSgnLi91bmlvbicpLFxuICAndW5pb25CeSc6IHJlcXVpcmUoJy4vdW5pb25CeScpLFxuICAndW5pb25XaXRoJzogcmVxdWlyZSgnLi91bmlvbldpdGgnKSxcbiAgJ3VuaXEnOiByZXF1aXJlKCcuL3VuaXEnKSxcbiAgJ3VuaXFCeSc6IHJlcXVpcmUoJy4vdW5pcUJ5JyksXG4gICd1bmlxV2l0aCc6IHJlcXVpcmUoJy4vdW5pcVdpdGgnKSxcbiAgJ3VuemlwJzogcmVxdWlyZSgnLi91bnppcCcpLFxuICAndW56aXBXaXRoJzogcmVxdWlyZSgnLi91bnppcFdpdGgnKSxcbiAgJ3dpdGhvdXQnOiByZXF1aXJlKCcuL3dpdGhvdXQnKSxcbiAgJ3hvcic6IHJlcXVpcmUoJy4veG9yJyksXG4gICd4b3JCeSc6IHJlcXVpcmUoJy4veG9yQnknKSxcbiAgJ3hvcldpdGgnOiByZXF1aXJlKCcuL3hvcldpdGgnKSxcbiAgJ3ppcCc6IHJlcXVpcmUoJy4vemlwJyksXG4gICd6aXBPYmplY3QnOiByZXF1aXJlKCcuL3ppcE9iamVjdCcpLFxuICAnemlwT2JqZWN0RGVlcCc6IHJlcXVpcmUoJy4vemlwT2JqZWN0RGVlcCcpLFxuICAnemlwV2l0aCc6IHJlcXVpcmUoJy4vemlwV2l0aCcpXG59O1xuIiwidmFyIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpLFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gcmVxdWlyZSgnLi9faXNJdGVyYXRlZUNhbGwnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAqIGVsZW1lbnRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICpcbiAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gKi9cbmZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICBzaXplID0gMTtcbiAgfSBlbHNlIHtcbiAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNodW5rO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwODtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRmluaXRlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCIvKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICovXG5mdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhY3Q7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICogYW5kL29yIHZhbHVlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5ID0gWzFdO1xuICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICpcbiAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXkpO1xuICogLy8gPT4gWzFdXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25jYXQ7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZsYXR0ZW5hYmxlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZURpZmZlcmVuY2UgPSByZXF1aXJlKCcuL19iYXNlRGlmZmVyZW5jZScpLFxuICAgIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAqXG4gKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAqIEBleGFtcGxlXG4gKlxuICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAqIC8vID0+IFsxXVxuICovXG52YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgIDogW107XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkaWZmZXJlbmNlO1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpY3RJbmRleE9mO1xuIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnQ7XG4iLCIvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvcnRPdXQ7XG4iLCJ2YXIgYmFzZURpZmZlcmVuY2UgPSByZXF1aXJlKCcuL19iYXNlRGlmZmVyZW5jZScpLFxuICAgIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gKiAodmFsdWUpLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAqIC8vID0+IFsxLjJdXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAqIC8vID0+IFt7ICd4JzogMiB9XVxuICovXG52YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmZlcmVuY2VCeTtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwidmFyIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWF0Y2hEYXRhO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKSxcbiAgICBnZXQgPSByZXF1aXJlKCcuL2dldCcpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwidmFyIGJhc2VIYXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VIYXNJbicpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNJbjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpLFxuICAgIGJhc2VQcm9wZXJ0eURlZXAgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHlEZWVwJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3BlcnR5O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCJ2YXIgYmFzZURpZmZlcmVuY2UgPSByZXF1aXJlKCcuL19iYXNlRGlmZmVyZW5jZScpLFxuICAgIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gKlxuICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gKi9cbnZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmZlcmVuY2VXaXRoO1xuIiwidmFyIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpLFxuICAgIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vdG9JbnRlZ2VyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjUuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBbMiwgM11cbiAqXG4gKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAqIC8vID0+IFszXVxuICpcbiAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICogLy8gPT4gW11cbiAqXG4gKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICovXG5mdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZHJvcDtcbiIsInZhciBiYXNlU2xpY2UgPSByZXF1aXJlKCcuL19iYXNlU2xpY2UnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICogLy8gPT4gWzFdXG4gKlxuICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAqIC8vID0+IFtdXG4gKlxuICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICovXG5mdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgbiA9IGxlbmd0aCAtIG47XG4gIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRyb3BSaWdodDtcbiIsInZhciBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlV2hpbGUgPSByZXF1aXJlKCcuL19iYXNlV2hpbGUnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICogXTtcbiAqXG4gKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICovXG5mdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZVdoaWxlKGFycmF5LCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRyb3BSaWdodFdoaWxlO1xuIiwidmFyIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VXaGlsZSA9IHJlcXVpcmUoJy4vX2Jhc2VXaGlsZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gKiBdO1xuICpcbiAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gKi9cbmZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZVdoaWxlKGFycmF5LCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRyb3BXaGlsZTtcbiIsInZhciBiYXNlRmlsbCA9IHJlcXVpcmUoJy4vX2Jhc2VGaWxsJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpO1xuXG4vKipcbiAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICogaW5jbHVkaW5nLCBgZW5kYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4yLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAqXG4gKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAqXG4gKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICogLy8gPT4gWzIsIDIsIDJdXG4gKlxuICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICovXG5mdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICBzdGFydCA9IDA7XG4gICAgZW5kID0gbGVuZ3RoO1xuICB9XG4gIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbGw7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKSxcbiAgICB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vdG9MZW5ndGgnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICB9XG4gIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmlsbDtcbiIsInZhciBiYXNlQ2xhbXAgPSByZXF1aXJlKCcuL19iYXNlQ2xhbXAnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xudmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTGVuZ3RoKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDBcbiAqXG4gKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IDQyOTQ5NjcyOTVcbiAqXG4gKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0xlbmd0aDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgIH1cbiAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsYW1wO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAqIF07XG4gKlxuICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gKiAvLyA9PiAwXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiAxXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IDBcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiAyXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgfVxuICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kSW5kZXg7XG4iLCJ2YXIgYmFzZUZpbmRJbmRleCA9IHJlcXVpcmUoJy4vX2Jhc2VGaW5kSW5kZXgnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICogXTtcbiAqXG4gKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICogLy8gPT4gMlxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gKiAvLyA9PiAwXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiAyXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAqIC8vID0+IDBcbiAqL1xuZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gIH1cbiAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZExhc3RJbmRleDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9oZWFkJyk7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuRGVlcDtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuNC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAqXG4gKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gKlxuICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuRGVwdGg7XG4iLCIvKipcbiAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqL1xuZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSB7fTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmcm9tUGFpcnM7XG4iLCJ2YXIgYmFzZUluZGV4T2YgPSByZXF1aXJlKCcuL19iYXNlSW5kZXhPZicpLFxuICAgIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vdG9JbnRlZ2VyJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAqIC8vID0+IDFcbiAqXG4gKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICB9XG4gIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbmRleE9mO1xuIiwidmFyIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpO1xuXG4vKipcbiAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0aWFsO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSW50ZXJzZWN0aW9uID0gcmVxdWlyZSgnLi9fYmFzZUludGVyc2VjdGlvbicpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBjYXN0QXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9fY2FzdEFycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICogLy8gPT4gWzJdXG4gKi9cbnZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgIDogW107XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcnNlY3Rpb247XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJbnRlcnNlY3Rpb24gPSByZXF1aXJlKCcuL19iYXNlSW50ZXJzZWN0aW9uJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGNhc3RBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL19jYXN0QXJyYXlMaWtlT2JqZWN0JyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICogKHZhbHVlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gKiAvLyA9PiBbMi4xXVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAqIC8vID0+IFt7ICd4JzogMSB9XVxuICovXG52YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIG1hcHBlZC5wb3AoKTtcbiAgfVxuICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICA6IFtdO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0aW9uQnk7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJbnRlcnNlY3Rpb24gPSByZXF1aXJlKCcuL19iYXNlSW50ZXJzZWN0aW9uJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGNhc3RBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL19jYXN0QXJyYXlMaWtlT2JqZWN0JyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICpcbiAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICovXG52YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICBpZiAoY29tcGFyYXRvcikge1xuICAgIG1hcHBlZC5wb3AoKTtcbiAgfVxuICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgIDogW107XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcnNlY3Rpb25XaXRoO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luO1xuXG4vKipcbiAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gKiAvLyA9PiAnYX5ifmMnXG4gKi9cbmZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGpvaW47XG4iLCJ2YXIgYmFzZUZpbmRJbmRleCA9IHJlcXVpcmUoJy4vX2Jhc2VGaW5kSW5kZXgnKSxcbiAgICBiYXNlSXNOYU4gPSByZXF1aXJlKCcuL19iYXNlSXNOYU4nKSxcbiAgICBzdHJpY3RMYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4vX3N0cmljdExhc3RJbmRleE9mJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICogLy8gPT4gM1xuICpcbiAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAqIC8vID0+IDFcbiAqL1xuZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGFzdEluZGV4T2Y7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaWN0TGFzdEluZGV4T2Y7XG4iLCJ2YXIgYmFzZU50aCA9IHJlcXVpcmUoJy4vX2Jhc2VOdGgnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjExLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gKlxuICogXy5udGgoYXJyYXksIDEpO1xuICogLy8gPT4gJ2InXG4gKlxuICogXy5udGgoYXJyYXksIC0yKTtcbiAqIC8vID0+ICdjJztcbiAqL1xuZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbnRoO1xuIiwidmFyIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VOdGg7XG4iLCJ2YXIgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIHB1bGxBbGwgPSByZXF1aXJlKCcuL3B1bGxBbGwnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAqXG4gKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAqIC8vID0+IFsnYicsICdiJ11cbiAqL1xudmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwdWxsO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZldpdGg7XG4iLCJ2YXIgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZVB1bGxBbGwgPSByZXF1aXJlKCcuL19iYXNlUHVsbEFsbCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAqXG4gKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICogY29uc29sZS5sb2coYXJyYXkpO1xuICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gKi9cbmZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgOiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwdWxsQWxsQnk7XG4iLCJ2YXIgYmFzZVB1bGxBbGwgPSByZXF1aXJlKCcuL19iYXNlUHVsbEFsbCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuNi4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gKlxuICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gKi9cbmZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgOiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwdWxsQWxsV2l0aDtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUF0ID0gcmVxdWlyZSgnLi9fYmFzZUF0JyksXG4gICAgYmFzZVB1bGxBdCA9IHJlcXVpcmUoJy4vX2Jhc2VQdWxsQXQnKSxcbiAgICBjb21wYXJlQXNjZW5kaW5nID0gcmVxdWlyZSgnLi9fY29tcGFyZUFzY2VuZGluZycpLFxuICAgIGZsYXRSZXN0ID0gcmVxdWlyZSgnLi9fZmxhdFJlc3QnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAqIC8vID0+IFsnYScsICdjJ11cbiAqXG4gKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICogLy8gPT4gWydiJywgJ2QnXVxuICovXG52YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwdWxsQXQ7XG4iLCJ2YXIgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAqL1xuZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUF0O1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBsYXN0ID0gcmVxdWlyZSgnLi9sYXN0JyksXG4gICAgcGFyZW50ID0gcmVxdWlyZSgnLi9fcGFyZW50JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuc2V0O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0JyksXG4gICAgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKlxuICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wYXJlQXNjZW5kaW5nO1xuIiwidmFyIGZsYXR0ZW4gPSByZXF1aXJlKCcuL2ZsYXR0ZW4nKSxcbiAgICBvdmVyUmVzdCA9IHJlcXVpcmUoJy4vX292ZXJSZXN0JyksXG4gICAgc2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRUb1N0cmluZycpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdFJlc3Q7XG4iLCJ2YXIgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZVB1bGxBdCA9IHJlcXVpcmUoJy4vX2Jhc2VQdWxsQXQnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICogfSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXkpO1xuICogLy8gPT4gWzEsIDNdXG4gKlxuICogY29uc29sZS5sb2coZXZlbnMpO1xuICogLy8gPT4gWzIsIDRdXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBpbmRleGVzID0gW10sXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgcHJlZGljYXRlID0gYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgfVxuICB9XG4gIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuLyoqXG4gKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICpcbiAqIF8ucmV2ZXJzZShhcnJheSk7XG4gKiAvLyA9PiBbMywgMiwgMV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gKiAvLyA9PiBbMywgMiwgMV1cbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXZlcnNlO1xuIiwidmFyIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpLFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gcmVxdWlyZSgnLi9faXNJdGVyYXRlZUNhbGwnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAqIHJldHVybmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgIHN0YXJ0ID0gMDtcbiAgICBlbmQgPSBsZW5ndGg7XG4gIH1cbiAgZWxzZSB7XG4gICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgfVxuICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzbGljZTtcbiIsInZhciBiYXNlU29ydGVkSW5kZXggPSByZXF1aXJlKCcuL19iYXNlU29ydGVkSW5kZXgnKTtcblxuLyoqXG4gKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICogIGludG8gYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICogLy8gPT4gMVxuICovXG5mdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRlZEluZGV4O1xuIiwidmFyIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VTb3J0ZWRJbmRleEJ5ID0gcmVxdWlyZSgnLi9fYmFzZVNvcnRlZEluZGV4QnknKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAqXG4gKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAqIC8vID0+IDBcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICogLy8gPT4gMFxuICovXG5mdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc29ydGVkSW5kZXhCeTtcbiIsInZhciBiYXNlU29ydGVkSW5kZXggPSByZXF1aXJlKCcuL19iYXNlU29ydGVkSW5kZXgnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICogLy8gPT4gMVxuICovXG5mdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmIChsZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRlZEluZGV4T2Y7XG4iLCJ2YXIgYmFzZVNvcnRlZEluZGV4ID0gcmVxdWlyZSgnLi9fYmFzZVNvcnRlZEluZGV4Jyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAqICBpbnRvIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gKiAvLyA9PiA0XG4gKi9cbmZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRlZExhc3RJbmRleDtcbiIsInZhciBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlU29ydGVkSW5kZXhCeSA9IHJlcXVpcmUoJy4vX2Jhc2VTb3J0ZWRJbmRleEJ5Jyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAqICBpbnRvIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICpcbiAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAqIC8vID0+IDFcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAqIC8vID0+IDFcbiAqL1xuZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiIsInZhciBiYXNlU29ydGVkSW5kZXggPSByZXF1aXJlKCcuL19iYXNlU29ydGVkSW5kZXgnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmIChsZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiIsInZhciBiYXNlU29ydGVkVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VTb3J0ZWRVbmlxJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc29ydGVkVW5pcTtcbiIsInZhciBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlU29ydGVkVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VTb3J0ZWRVbmlxJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICogZm9yIHNvcnRlZCBhcnJheXMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICogLy8gPT4gWzEuMSwgMi4zXVxuICovXG5mdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0ZWRVbmlxQnk7XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGFpbChbMSwgMiwgM10pO1xuICogLy8gPT4gWzIsIDNdXG4gKi9cbmZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGFpbDtcbiIsInZhciBiYXNlU2xpY2UgPSByZXF1aXJlKCcuL19iYXNlU2xpY2UnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IFsxXVxuICpcbiAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAqIC8vID0+IFtdXG4gKi9cbmZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGFrZTtcbiIsInZhciBiYXNlU2xpY2UgPSByZXF1aXJlKCcuL19iYXNlU2xpY2UnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICogLy8gPT4gWzNdXG4gKlxuICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAqIC8vID0+IFsyLCAzXVxuICpcbiAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICogLy8gPT4gW11cbiAqL1xuZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gIG4gPSBsZW5ndGggLSBuO1xuICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRha2VSaWdodDtcbiIsInZhciBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlV2hpbGUgPSByZXF1aXJlKCcuL19iYXNlV2hpbGUnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICogXTtcbiAqXG4gKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAqIC8vID0+IFtdXG4gKi9cbmZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlV2hpbGUoYXJyYXksIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRha2VSaWdodFdoaWxlO1xuIiwidmFyIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VXaGlsZSA9IHJlcXVpcmUoJy4vX2Jhc2VXaGlsZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gKiBdO1xuICpcbiAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gW11cbiAqL1xuZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlV2hpbGUoYXJyYXksIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGFrZVdoaWxlO1xuIiwidmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgYmFzZVVuaXEgPSByZXF1aXJlKCcuL19iYXNlVW5pcScpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqL1xudmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmlvbjtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBub29wID0gcmVxdWlyZSgnLi9ub29wJyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICovXG52YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTZXQ7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLm5vb3ApO1xuICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICovXG5mdW5jdGlvbiBub29wKCkge1xuICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5vb3A7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBiYXNlVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmlxJyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAqICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gKiAvLyA9PiBbMi4xLCAxLjJdXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAqL1xudmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaW9uQnk7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBiYXNlVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmlxJyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICpcbiAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICovXG52YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaW9uV2l0aDtcbiIsInZhciBiYXNlVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmlxJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICogaW4gdGhlIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlxKFsyLCAxLCAyXSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqL1xuZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxO1xuIiwidmFyIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VVbmlxID0gcmVxdWlyZSgnLi9fYmFzZVVuaXEnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAqICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICogLy8gPT4gWzIuMSwgMS4yXVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gKi9cbmZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pcUJ5O1xuIiwidmFyIGJhc2VVbmlxID0gcmVxdWlyZSgnLi9fYmFzZVVuaXEnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gKlxuICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICovXG5mdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pcVdpdGg7XG4iLCJ2YXIgYmFzZURpZmZlcmVuY2UgPSByZXF1aXJlKCcuL19iYXNlRGlmZmVyZW5jZScpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICogLy8gPT4gWzNdXG4gKi9cbnZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgIDogW107XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB3aXRob3V0O1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgYmFzZVhvciA9IHJlcXVpcmUoJy4vX2Jhc2VYb3InKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gKiAvLyA9PiBbMSwgM11cbiAqL1xudmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB4b3I7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBiYXNlWG9yID0gcmVxdWlyZSgnLi9fYmFzZVhvcicpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpLFxuICAgIGxhc3QgPSByZXF1aXJlKCcuL2xhc3QnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gKiAvLyA9PiBbMS4yLCAzLjRdXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gKi9cbnZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB4b3JCeTtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGJhc2VYb3IgPSByZXF1aXJlKCcuL19iYXNlWG9yJyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gKlxuICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAqL1xudmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB4b3JXaXRoO1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICB1bnppcCA9IHJlcXVpcmUoJy4vdW56aXAnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICovXG52YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHppcDtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZVppcE9iamVjdCA9IHJlcXVpcmUoJy4vX2Jhc2VaaXBPYmplY3QnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjQuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKi9cbmZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB6aXBPYmplY3Q7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ25WYWx1ZTtcbiIsInZhciBiYXNlU2V0ID0gcmVxdWlyZSgnLi9fYmFzZVNldCcpLFxuICAgIGJhc2VaaXBPYmplY3QgPSByZXF1aXJlKCcuL19iYXNlWmlwT2JqZWN0Jyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICovXG5mdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gemlwT2JqZWN0RGVlcDtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICB9XG4gICAgfVxuICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0O1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICB1bnppcFdpdGggPSByZXF1aXJlKCcuL3VuemlwV2l0aCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjguMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAqICBncm91cGVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gKiAgIHJldHVybiBhICsgYiArIGM7XG4gKiB9KTtcbiAqIC8vID0+IFsxMTEsIDIyMl1cbiAqL1xudmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHppcFdpdGg7XG4iLCJpbXBvcnQgQXBwTW9kZWwgZnJvbSAnc3RvcmUvbW9kZWxzL2FwcCc7XG5pbXBvcnQgeyBkYXNoVG9DYXBpdGFsIH0gZnJvbSAnc3RvcmUvdXRpbHMvdHJhbnNmb3Jtcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIG1vZGVsRm9yKG1vZGVsTmFtZSwgc3RvcmUsIGRhdGEgPSB7fSkge1xuXHRsZXQgbW9kZWxzID0gYXdhaXQgaW1wb3J0KC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gLyogd2VicGFja01vZGU6IFwibGF6eVwiICovICdtb2RlbHMnKVxuXHRjb25zb2xlLmxvZygnTW9kZWxzOiAnLCBtb2RlbHMpO1xuXHRsZXQgTW9kZWwgPSBtb2RlbHNbZGFzaFRvQ2FwaXRhbChtb2RlbE5hbWUpXTtcblx0cmV0dXJuIE1vZGVsID8gbmV3IE1vZGVsKG1vZGVsTmFtZSwgc3RvcmUsIGRhdGEpIDogbmV3IEFwcE1vZGVsKG1vZGVsTmFtZSwgc3RvcmUsIGRhdGEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtb2RlbEZvcjsiLCJpbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnc3RvcmUvdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgRGV2TG9nZ2VyIGZyb20gJ3N0b3JlL3V0aWxzL2Rldi1sb2dnZXInO1xuXG5jbGFzcyBKc29uQXBpRXJyb3JzIHtcblxuICBzdGF0aWMgZm9ybWF0RXJyb3JzKGUpIHtcbiAgICBsZXQgZm9ybWF0dGVkRXJyb3I7XG4gICAgaWYgKGUucmVzcG9uc2UpIHtcbiAgICAgIERldkxvZ2dlcignU2VydmVyIGVycm9yOiAnLCBlLnJlc3BvbnNlLmRhdGEuZXJyb3JzKTtcbiAgICAgIGZvcm1hdHRlZEVycm9yID0gZS5yZXNwb25zZS5kYXRhLmVycm9ycyA/IHRoaXMuc2VydmVyRXJyb3JzKGUucmVzcG9uc2UuZGF0YS5lcnJvcnMpIDogdGhpcy5taXNjRXJyb3IoZS5yZXNwb25zZS5zdGF0dXMsIGUucmVzcG9uc2Uuc3RhdHVzVGV4dCwgJ1NvcnJ5LCB0aGVyZSB3YXMgYSBzZXJ2ZXIgZXJyb3IuJyk7XG5cbiAgICB9IGVsc2UgaWYgKGUucmVxdWVzdCkge1xuICAgICAgRGV2TG9nZ2VyKCdSZXF1ZXN0IGVycm9yOiAnLCBlLnJlcXVlc3QpO1xuICAgICAgZm9ybWF0dGVkRXJyb3IgPSB0aGlzLm1pc2NFcnJvcig1MDAsICdSZXF1ZXN0IEVycm9yJywgZSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgRGV2TG9nZ2VyKCdBcHAgZXJyb3I6ICcsIGUpO1xuICAgICAgZm9ybWF0dGVkRXJyb3IgPSB0aGlzLm1pc2NFcnJvcig1MDAsICdNaXNjIEVycm9yJywgZS5tZXNzYWdlKTtcblxuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGVkRXJyb3I7XG4gIH1cblxuICBzdGF0aWMgbWlzY0Vycm9yKHN0YXR1cywgdGl0bGUsIGRldGFpbCkge1xuICAgIHJldHVybiBbeyBzdGF0dXM6IHN0YXR1cywgdGl0bGU6IHRpdGxlLCBkZXRhaWw6IGRldGFpbCB9XTtcbiAgfVxuXG4gIHN0YXRpYyBzZXJ2ZXJFcnJvcnMoZXJyb3JzKSB7XG4gICAgbGV0IGZvcm1hdHRlZEVycm9ycyA9IFtdO1xuXG4gICAgZXJyb3JzLmZvckVhY2goZXJyb3IgPT4ge1xuICAgICAgZXJyb3IuZGV0YWlsID0gZXJyb3IuZGV0YWlsLnJlcGxhY2UoLzovZywgJycpO1xuICAgICAgZm9ybWF0dGVkRXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3JtYXR0ZWRFcnJvcnM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSnNvbkFwaUVycm9ycztcbiJdLCJzb3VyY2VSb290IjoiIn0=